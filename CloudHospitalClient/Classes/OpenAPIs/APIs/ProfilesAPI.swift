//
// ProfilesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProfilesAPI {

    /**
     Change user's email on both Identity and Api.
     
     - parameter changeEmailCommand: (body)  (optional)
     - returns: Bool
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2ProfilesChangeemailPost(changeEmailCommand: ChangeEmailCommand? = nil) async throws -> Bool {
        let requestBuilder = apiV2ProfilesChangeemailPostWithRequestBuilder(changeEmailCommand: changeEmailCommand)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     Change user's email on both Identity and Api.
     - POST /api/v2/profiles/changeemail
     - Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter changeEmailCommand: (body)  (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV2ProfilesChangeemailPostWithRequestBuilder(changeEmailCommand: ChangeEmailCommand? = nil) -> RequestBuilder<Bool> {
        let localVariablePath = "/api/v2/profiles/changeemail"
        let localVariableURLString = CloudHospitalClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changeEmailCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Configm email.
     
     - parameter confirmEmailCommand: (body)  (optional)
     - returns: Bool
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2ProfilesConfirmemailPost(confirmEmailCommand: ConfirmEmailCommand? = nil) async throws -> Bool {
        let requestBuilder = apiV2ProfilesConfirmemailPostWithRequestBuilder(confirmEmailCommand: confirmEmailCommand)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     Configm email.
     - POST /api/v2/profiles/confirmemail
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter confirmEmailCommand: (body)  (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV2ProfilesConfirmemailPostWithRequestBuilder(confirmEmailCommand: ConfirmEmailCommand? = nil) -> RequestBuilder<Bool> {
        let localVariablePath = "/api/v2/profiles/confirmemail"
        let localVariableURLString = CloudHospitalClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: confirmEmailCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Profile.
     
     - returns: UserModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2ProfilesGet() async throws -> UserModel {
        let requestBuilder = apiV2ProfilesGetWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     Get Profile.
     - GET /api/v2/profiles
     - OAuth:
       - type: oauth2
       - name: oauth2
     - returns: RequestBuilder<UserModel> 
     */
    open class func apiV2ProfilesGetWithRequestBuilder() -> RequestBuilder<UserModel> {
        let localVariablePath = "/api/v2/profiles"
        let localVariableURLString = CloudHospitalClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Profile.
     
     - parameter updateProfileCommand: (body)  (optional)
     - returns: UserModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2ProfilesPut(updateProfileCommand: UpdateProfileCommand? = nil) async throws -> UserModel {
        let requestBuilder = apiV2ProfilesPutWithRequestBuilder(updateProfileCommand: updateProfileCommand)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     Update Profile.
     - PUT /api/v2/profiles
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter updateProfileCommand: (body)  (optional)
     - returns: RequestBuilder<UserModel> 
     */
    open class func apiV2ProfilesPutWithRequestBuilder(updateProfileCommand: UpdateProfileCommand? = nil) -> RequestBuilder<UserModel> {
        let localVariablePath = "/api/v2/profiles"
        let localVariableURLString = CloudHospitalClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateProfileCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
