//
// PatientsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class PatientsAPI {
    /**
     Delete Patient.
     
     - parameter patientId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Bool, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2PatientsPatientIdDelete(patientId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error>.init { promise in
            apiV2PatientsPatientIdDeleteWithRequestBuilder(patientId: patientId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Delete Patient.
     - DELETE /api/v2/patients/{patientId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter patientId: (path)  
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV2PatientsPatientIdDeleteWithRequestBuilder(patientId: UUID) -> RequestBuilder<Bool> {
        var path = "/api/v2/patients/{patientId}"
        let patientIdPreEscape = "\(APIHelper.mapValueToPathItem(patientId))"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Patient.
     
     - parameter patientId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<PatientModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2PatientsPatientIdGet(patientId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<PatientModel, Error> {
        return Future<PatientModel, Error>.init { promise in
            apiV2PatientsPatientIdGetWithRequestBuilder(patientId: patientId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get Patient.
     - GET /api/v2/patients/{patientId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter patientId: (path)  
     - returns: RequestBuilder<PatientModel> 
     */
    open class func apiV2PatientsPatientIdGetWithRequestBuilder(patientId: UUID) -> RequestBuilder<PatientModel> {
        var path = "/api/v2/patients/{patientId}"
        let patientIdPreEscape = "\(APIHelper.mapValueToPathItem(patientId))"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PatientModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Patient.
     
     - parameter patientId: (path)  
     - parameter updatePatientCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<PatientModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2PatientsPatientIdPut(patientId: UUID, updatePatientCommand: UpdatePatientCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<PatientModel, Error> {
        return Future<PatientModel, Error>.init { promise in
            apiV2PatientsPatientIdPutWithRequestBuilder(patientId: patientId, updatePatientCommand: updatePatientCommand).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Update Patient.
     - PUT /api/v2/patients/{patientId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter patientId: (path)  
     - parameter updatePatientCommand: (body)  (optional)
     - returns: RequestBuilder<PatientModel> 
     */
    open class func apiV2PatientsPatientIdPutWithRequestBuilder(patientId: UUID, updatePatientCommand: UpdatePatientCommand? = nil) -> RequestBuilder<PatientModel> {
        var path = "/api/v2/patients/{patientId}"
        let patientIdPreEscape = "\(APIHelper.mapValueToPathItem(patientId))"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updatePatientCommand)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PatientModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Patient.
     
     - parameter createPatientCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<PatientModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2PatientsPost(createPatientCommand: CreatePatientCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<PatientModel, Error> {
        return Future<PatientModel, Error>.init { promise in
            apiV2PatientsPostWithRequestBuilder(createPatientCommand: createPatientCommand).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Create a Patient.
     - POST /api/v2/patients
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter createPatientCommand: (body)  (optional)
     - returns: RequestBuilder<PatientModel> 
     */
    open class func apiV2PatientsPostWithRequestBuilder(createPatientCommand: CreatePatientCommand? = nil) -> RequestBuilder<PatientModel> {
        let path = "/api/v2/patients"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPatientCommand)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PatientModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
