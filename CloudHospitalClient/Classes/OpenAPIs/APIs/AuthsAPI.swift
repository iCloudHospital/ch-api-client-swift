//
// AuthsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthsAPI {

    open class func signInWithEmail(email: String, password: String) async throws -> IdentityToken {
        let requestBuilder = signInWithEmailWithRequestBuilder(email: email, password: password)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    open class func signInWithEmailWithRequestBuilder(email: String, password: String) -> RequestBuilder<IdentityToken> {
        let localVariablePath = "/connect/token"
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath

        let parameters: [String: Any?] = [
            "client_id" : Constants.clientId,
            "client_secret" : Constants.clientSecret,
            "scope" : Constants.scope,
            "grant_type": "password",
            "username" : email,
            "password" : password
        ]

        let localVariableParameters = APIHelper.rejectNil(parameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
           "Content-Type" : "application/x-www-form-urlencoded"
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityToken>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    open class func signInExternal(externalSignIn: ExternalSignIn) async throws -> IdentityToken {
        let requestBuilder = signInExternalWithRequestBuilder(externalSignIn: externalSignIn)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    open class func signInExternalWithRequestBuilder(externalSignIn: ExternalSignIn) -> RequestBuilder<IdentityToken> {
        let localVariablePath = "/connect/token"
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath

        let parameters: [String: Any?] = [
            "client_id": Constants.clientId,
            "client_secret": Constants.clientSecret,
            "scope": Constants.scope,
            "grant_type": "external",
            "provider": externalSignIn.provider,
            "sub": externalSignIn.sub ?? "",
            "email": externalSignIn.email ?? "",
            "external_token": externalSignIn.external_token
        ]

        let localVariableParameters = APIHelper.rejectNil(parameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
           "Content-Type" : "application/x-www-form-urlencoded"
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityToken>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    open class func getUserInfo() async throws -> UserInfo {
        let requestBuilder = getUserInfoWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    open class func getUserInfoWithRequestBuilder() -> RequestBuilder<UserInfo> {
        let localVariablePath = "/connect/userinfo"
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath

        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserInfo>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    open class func refreshToken() async throws -> IdentityToken {
            let requestBuilder = refreshTokenWithRequestBuilder()
            let requestTask = requestBuilder.requestTask
            return try await withTaskCancellationHandler {
                try Task.checkCancellation()
                return try await withCheckedThrowingContinuation { continuation in
                    guard !Task.isCancelled else {
                      continuation.resume(throwing: CancellationError())
                      return
                    }

                    requestBuilder.execute { result in
                        switch result {
                        case let .success(response):
                            continuation.resume(returning: response.body)
                        case let .failure(error):
                            continuation.resume(throwing: error)
                        }
                    }
                }
            } onCancel: {
                requestTask.cancel()
            }
        }


    open class func refreshTokenWithRequestBuilder() -> RequestBuilder<IdentityToken> {
        let localVariablePath = "/connect/token"
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath

        let identityToken = KeychainStorage.getIdentityToken()

        let parameters: [String: Any?] = [
            "client_id" : Constants.clientId,
            "client_secret" : Constants.clientSecret,
            "grant_type": "refresh_token",
            "refresh_token" : identityToken?.refresh_token ?? "",
        ]

        let localVariableParameters = APIHelper.rejectNil(parameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
           "Content-Type" : "application/x-www-form-urlencoded"
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityToken>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    open class func signOut() async throws {
        let requestBuilder = requestSignOutWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case .success(_):
                        continuation.resume(returning: ())
                    case let .failure(error):
                        if case let ErrorResponse.error(status, _, _, _) = error {
                            if status == 200 {
                                continuation.resume(returning: ())
                            } else {
                                continuation.resume(throwing: error)
                            }
                        } else {
                            continuation.resume(throwing: error)
                        }
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    open class func requestSignOutWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/connect/revocation"
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath

        let identityToken = KeychainStorage.getIdentityToken()

        let parameters: [String: Any?] = [
            "client_id" : Constants.clientId,
            "client_secret" : Constants.clientSecret,
            "token" : identityToken?.refresh_token ?? "",
            "token_type_hint": "refresh_token"
        ]

        let localVariableParameters = APIHelper.rejectNil(parameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
           "Content-Type" : "application/x-www-form-urlencoded"
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = CloudHospitalClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }}
}
