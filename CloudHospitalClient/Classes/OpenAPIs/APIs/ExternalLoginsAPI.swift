//
// ExternalLoginsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ExternalLoginsAPI {

    /**

     - parameter externalLoginInfo: (body)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1ExternalLoginsDelete(externalLoginInfo: ExternalLoginInfo? = nil) async throws {
        let requestBuilder = apiV1ExternalLoginsDeleteWithRequestBuilder(externalLoginInfo: externalLoginInfo)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     - DELETE /api/v1/externalLogins
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter externalLoginInfo: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1ExternalLoginsDeleteWithRequestBuilder(externalLoginInfo: ExternalLoginInfo? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/externalLogins"
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: externalLoginInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = CloudHospitalClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1ExternalLoginsGet() async throws {
        let requestBuilder = apiV1ExternalLoginsGetWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     - GET /api/v1/externalLogins
     - OAuth:
       - type: oauth2
       - name: oauth2
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1ExternalLoginsGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/externalLogins"
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = CloudHospitalClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter externalLoginInfo: (body)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1ExternalLoginsPost(externalLoginInfo: ExternalLoginInfo? = nil) async throws {
        let requestBuilder = apiV1ExternalLoginsPostWithRequestBuilder(externalLoginInfo: externalLoginInfo)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     - POST /api/v1/externalLogins
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter externalLoginInfo: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1ExternalLoginsPostWithRequestBuilder(externalLoginInfo: ExternalLoginInfo? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/externalLogins"
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: externalLoginInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = CloudHospitalClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter provider: (path)  
     - parameter key: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1ExternalLoginsProviderKeyDelete(provider: String, key: String) async throws {
        let requestBuilder = apiV1ExternalLoginsProviderKeyDeleteWithRequestBuilder(provider: provider, key: key)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     - DELETE /api/v1/externalLogins/{provider}/{key}
     - parameter provider: (path)  
     - parameter key: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1ExternalLoginsProviderKeyDeleteWithRequestBuilder(provider: String, key: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/externalLogins/{provider}/{key}"
        let providerPreEscape = "\(APIHelper.mapValueToPathItem(provider))"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let keyPreEscape = "\(APIHelper.mapValueToPathItem(key))"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = CloudHospitalClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter provider: (path)  
     - parameter key: (path)  
     - returns: ExternalLoginListViewModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1ExternalLoginsProviderKeyGet(provider: String, key: String) async throws -> ExternalLoginListViewModel {
        let requestBuilder = apiV1ExternalLoginsProviderKeyGetWithRequestBuilder(provider: provider, key: key)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     - GET /api/v1/externalLogins/{provider}/{key}
     - parameter provider: (path)  
     - parameter key: (path)  
     - returns: RequestBuilder<ExternalLoginListViewModel> 
     */
    open class func apiV1ExternalLoginsProviderKeyGetWithRequestBuilder(provider: String, key: String) -> RequestBuilder<ExternalLoginListViewModel> {
        var localVariablePath = "/api/v1/externalLogins/{provider}/{key}"
        let providerPreEscape = "\(APIHelper.mapValueToPathItem(provider))"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let keyPreEscape = "\(APIHelper.mapValueToPathItem(key))"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExternalLoginListViewModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiVersion: (query)  (optional)
     - parameter facebookUserDataDeletionRequestModel: (body)  (optional)
     - returns: FacebookUserDataDeletionResponseModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func facebookPatch(apiVersion: String? = nil, facebookUserDataDeletionRequestModel: FacebookUserDataDeletionRequestModel? = nil) async throws -> FacebookUserDataDeletionResponseModel {
        let requestBuilder = facebookPatchWithRequestBuilder(apiVersion: apiVersion, facebookUserDataDeletionRequestModel: facebookUserDataDeletionRequestModel)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     - PATCH /facebook
     - parameter apiVersion: (query)  (optional)
     - parameter facebookUserDataDeletionRequestModel: (body)  (optional)
     - returns: RequestBuilder<FacebookUserDataDeletionResponseModel> 
     */
    open class func facebookPatchWithRequestBuilder(apiVersion: String? = nil, facebookUserDataDeletionRequestModel: FacebookUserDataDeletionRequestModel? = nil) -> RequestBuilder<FacebookUserDataDeletionResponseModel> {
        let localVariablePath = "/facebook"
        let localVariableURLString = CloudHospitalClientAPI.identityBasePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: facebookUserDataDeletionRequestModel)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FacebookUserDataDeletionResponseModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
