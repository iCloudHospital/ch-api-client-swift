//
// AccreditationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class AccreditationsAPI {
    /**
     Get Accreditation.
     
     - parameter accreditationId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<AccreditationModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2AccreditationsAccreditationIdGet(accreditationId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<AccreditationModel, Error> {
        return Future<AccreditationModel, Error>.init { promise in
            apiV2AccreditationsAccreditationIdGetWithRequestBuilder(accreditationId: accreditationId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get Accreditation.
     - GET /api/v2/accreditations/{accreditationId}
     - parameter accreditationId: (path)  
     - returns: RequestBuilder<AccreditationModel> 
     */
    open class func apiV2AccreditationsAccreditationIdGetWithRequestBuilder(accreditationId: UUID) -> RequestBuilder<AccreditationModel> {
        var path = "/api/v2/accreditations/{accreditationId}"
        let accreditationIdPreEscape = "\(APIHelper.mapValueToPathItem(accreditationId))"
        let accreditationIdPostEscape = accreditationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accreditationId}", with: accreditationIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AccreditationModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all Accreditations.
     
     - parameter name: (query)  (optional)
     - parameter logo: (query)  (optional)
     - parameter country: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<AccreditationsModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2AccreditationsGet(name: String? = nil, logo: String? = nil, country: String? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<AccreditationsModel, Error> {
        return Future<AccreditationsModel, Error>.init { promise in
            apiV2AccreditationsGetWithRequestBuilder(name: name, logo: logo, country: country, page: page, limit: limit, lastRetrieved: lastRetrieved).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get all Accreditations.
     - GET /api/v2/accreditations
     - parameter name: (query)  (optional)
     - parameter logo: (query)  (optional)
     - parameter country: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - returns: RequestBuilder<AccreditationsModel> 
     */
    open class func apiV2AccreditationsGetWithRequestBuilder(name: String? = nil, logo: String? = nil, country: String? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil) -> RequestBuilder<AccreditationsModel> {
        let path = "/api/v2/accreditations"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "Name": name?.encodeToJSON(), 
            "Logo": logo?.encodeToJSON(), 
            "Country": country?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "lastRetrieved": lastRetrieved?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AccreditationsModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
