//
// AccreditationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AccreditationsAPI {

    /**
     Get Accreditation.
     
     - parameter accreditationId: (path)  
     - returns: AnyPublisher<AccreditationModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2AccreditationsAccreditationIdGet(accreditationId: UUID) -> AnyPublisher<AccreditationModel, Error> {
        var requestTask: RequestTask?
        return Future<AccreditationModel, Error> { promise in
            requestTask = apiV2AccreditationsAccreditationIdGetWithRequestBuilder(accreditationId: accreditationId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get Accreditation.
     - GET /api/v2/accreditations/{accreditationId}
     - parameter accreditationId: (path)  
     - returns: RequestBuilder<AccreditationModel> 
     */
    open class func apiV2AccreditationsAccreditationIdGetWithRequestBuilder(accreditationId: UUID) -> RequestBuilder<AccreditationModel> {
        var localVariablePath = "/api/v2/accreditations/{accreditationId}"
        let accreditationIdPreEscape = "\(APIHelper.mapValueToPathItem(accreditationId))"
        let accreditationIdPostEscape = accreditationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accreditationId}", with: accreditationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccreditationModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all Accreditations.
     
     - parameter name: (query)  (optional)
     - parameter logo: (query)  (optional)
     - parameter country: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - returns: AnyPublisher<AccreditationsModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2AccreditationsGet(name: String? = nil, logo: String? = nil, country: String? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil) -> AnyPublisher<AccreditationsModel, Error> {
        var requestTask: RequestTask?
        return Future<AccreditationsModel, Error> { promise in
            requestTask = apiV2AccreditationsGetWithRequestBuilder(name: name, logo: logo, country: country, page: page, limit: limit, lastRetrieved: lastRetrieved).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get all Accreditations.
     - GET /api/v2/accreditations
     - parameter name: (query)  (optional)
     - parameter logo: (query)  (optional)
     - parameter country: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - returns: RequestBuilder<AccreditationsModel> 
     */
    open class func apiV2AccreditationsGetWithRequestBuilder(name: String? = nil, logo: String? = nil, country: String? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil) -> RequestBuilder<AccreditationsModel> {
        let localVariablePath = "/api/v2/accreditations"
        let localVariableURLString = CloudHospitalClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Name": name?.encodeToJSON(),
            "Logo": logo?.encodeToJSON(),
            "Country": country?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "lastRetrieved": lastRetrieved?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccreditationsModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
