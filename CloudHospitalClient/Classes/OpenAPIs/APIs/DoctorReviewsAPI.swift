//
// DoctorReviewsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class DoctorReviewsAPI {
    /**
     Delete review.
     
     - parameter doctorId: (path)  
     - parameter patientId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId: UUID, patientId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        apiV1DoctorsDoctorIdReviewsPatientIdDeleteWithRequestBuilder(doctorId: doctorId, patientId: patientId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete review.
     - DELETE /api/v1/doctors/{doctorId}/reviews/{patientId}
     - Sample request:        DELETE /api/v1/doctors/1/reviews/1
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter doctorId: (path)  
     - parameter patientId: (path)  
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV1DoctorsDoctorIdReviewsPatientIdDeleteWithRequestBuilder(doctorId: UUID, patientId: UUID) -> RequestBuilder<Bool> {
        var path = "/api/v1/doctors/{doctorId}/reviews/{patientId}"
        let doctorIdPreEscape = "\(APIHelper.mapValueToPathItem(doctorId))"
        let doctorIdPostEscape = doctorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{doctorId}", with: doctorIdPostEscape, options: .literal, range: nil)
        let patientIdPreEscape = "\(APIHelper.mapValueToPathItem(patientId))"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get review.
     
     - parameter doctorId: (path)  
     - parameter patientId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId: UUID, patientId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue, completion: @escaping ((_ data: DoctorReviewViewModel?,_ error: Error?) -> Void)) {
        apiV1DoctorsDoctorIdReviewsPatientIdGetWithRequestBuilder(doctorId: doctorId, patientId: patientId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get review.
     - GET /api/v1/doctors/{doctorId}/reviews/{patientId}
     - Sample request:        GET /api/v1/doctors/1/reviews/1
     - parameter doctorId: (path)  
     - parameter patientId: (path)  
     - returns: RequestBuilder<DoctorReviewViewModel> 
     */
    open class func apiV1DoctorsDoctorIdReviewsPatientIdGetWithRequestBuilder(doctorId: UUID, patientId: UUID) -> RequestBuilder<DoctorReviewViewModel> {
        var path = "/api/v1/doctors/{doctorId}/reviews/{patientId}"
        let doctorIdPreEscape = "\(APIHelper.mapValueToPathItem(doctorId))"
        let doctorIdPostEscape = doctorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{doctorId}", with: doctorIdPostEscape, options: .literal, range: nil)
        let patientIdPreEscape = "\(APIHelper.mapValueToPathItem(patientId))"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DoctorReviewViewModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update review.
     
     - parameter doctorId: (path)  
     - parameter patientId: (path)  
     - parameter updateDoctorReviewCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId: UUID, patientId: UUID, updateDoctorReviewCommand: UpdateDoctorReviewCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        apiV1DoctorsDoctorIdReviewsPatientIdPutWithRequestBuilder(doctorId: doctorId, patientId: patientId, updateDoctorReviewCommand: updateDoctorReviewCommand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update review.
     - PUT /api/v1/doctors/{doctorId}/reviews/{patientId}
     - Sample request:
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter doctorId: (path)  
     - parameter patientId: (path)  
     - parameter updateDoctorReviewCommand: (body)  (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV1DoctorsDoctorIdReviewsPatientIdPutWithRequestBuilder(doctorId: UUID, patientId: UUID, updateDoctorReviewCommand: UpdateDoctorReviewCommand? = nil) -> RequestBuilder<Bool> {
        var path = "/api/v1/doctors/{doctorId}/reviews/{patientId}"
        let doctorIdPreEscape = "\(APIHelper.mapValueToPathItem(doctorId))"
        let doctorIdPostEscape = doctorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{doctorId}", with: doctorIdPostEscape, options: .literal, range: nil)
        let patientIdPreEscape = "\(APIHelper.mapValueToPathItem(patientId))"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateDoctorReviewCommand)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create review.
     
     - parameter doctorId: (path)  
     - parameter patientId: (path)  
     - parameter createDoctorReviewCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1DoctorsDoctorIdReviewsPost(doctorId: UUID, patientId: UUID, createDoctorReviewCommand: CreateDoctorReviewCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue, completion: @escaping ((_ data: DoctorReview?,_ error: Error?) -> Void)) {
        apiV1DoctorsDoctorIdReviewsPostWithRequestBuilder(doctorId: doctorId, patientId: patientId, createDoctorReviewCommand: createDoctorReviewCommand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create review.
     - POST /api/v1/doctors/{doctorId}/reviews
     - Sample request:        POST /api/v1/doctors/1/reviews/1
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter doctorId: (path)  
     - parameter patientId: (path)  
     - parameter createDoctorReviewCommand: (body)  (optional)
     - returns: RequestBuilder<DoctorReview> 
     */
    open class func apiV1DoctorsDoctorIdReviewsPostWithRequestBuilder(doctorId: UUID, patientId: UUID, createDoctorReviewCommand: CreateDoctorReviewCommand? = nil) -> RequestBuilder<DoctorReview> {
        var path = "/api/v1/doctors/{doctorId}/reviews"
        let doctorIdPreEscape = "\(APIHelper.mapValueToPathItem(doctorId))"
        let doctorIdPostEscape = doctorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{doctorId}", with: doctorIdPostEscape, options: .literal, range: nil)
        let patientIdPreEscape = "\(APIHelper.mapValueToPathItem(patientId))"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDoctorReviewCommand)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DoctorReview>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all reviews.
     
     - parameter doctorId: (query)  (optional)
     - parameter doctorName: (query)  (optional)
     - parameter patientId: (query)  (optional)
     - parameter patientName: (query)  (optional)
     - parameter body: (query)  (optional)
     - parameter recommended: (query)  (optional)
     - parameter reviewCategory: (query)  (optional)
     - parameter rate: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter current: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1DoctorsReviewsGet(doctorId: UUID? = nil, doctorName: String? = nil, patientId: UUID? = nil, patientName: String? = nil, body: String? = nil, recommended: Bool? = nil, reviewCategory: ReviewCategory? = nil, rate: Int? = nil, created: Date? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, current: Bool? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue, completion: @escaping ((_ data: DoctorReviewsViewModel?,_ error: Error?) -> Void)) {
        apiV1DoctorsReviewsGetWithRequestBuilder(doctorId: doctorId, doctorName: doctorName, patientId: patientId, patientName: patientName, body: body, recommended: recommended, reviewCategory: reviewCategory, rate: rate, created: created, page: page, limit: limit, lastRetrieved: lastRetrieved, current: current).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all reviews.
     - GET /api/v1/doctors/reviews
     - Sample request:        GET /api/v1/doctors/reviews
     - parameter doctorId: (query)  (optional)
     - parameter doctorName: (query)  (optional)
     - parameter patientId: (query)  (optional)
     - parameter patientName: (query)  (optional)
     - parameter body: (query)  (optional)
     - parameter recommended: (query)  (optional)
     - parameter reviewCategory: (query)  (optional)
     - parameter rate: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter current: (query)  (optional)
     - returns: RequestBuilder<DoctorReviewsViewModel> 
     */
    open class func apiV1DoctorsReviewsGetWithRequestBuilder(doctorId: UUID? = nil, doctorName: String? = nil, patientId: UUID? = nil, patientName: String? = nil, body: String? = nil, recommended: Bool? = nil, reviewCategory: ReviewCategory? = nil, rate: Int? = nil, created: Date? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, current: Bool? = nil) -> RequestBuilder<DoctorReviewsViewModel> {
        let path = "/api/v1/doctors/reviews"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "DoctorId": doctorId?.encodeToJSON(), 
            "DoctorName": doctorName?.encodeToJSON(), 
            "PatientId": patientId?.encodeToJSON(), 
            "PatientName": patientName?.encodeToJSON(), 
            "Body": body?.encodeToJSON(), 
            "Recommended": recommended?.encodeToJSON(), 
            "ReviewCategory": reviewCategory?.encodeToJSON(), 
            "Rate": rate?.encodeToJSON(), 
            "Created": created?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "lastRetrieved": lastRetrieved?.encodeToJSON(), 
            "Current": current?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DoctorReviewsViewModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
