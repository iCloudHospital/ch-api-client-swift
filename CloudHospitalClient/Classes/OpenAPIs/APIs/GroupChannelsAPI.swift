//
// GroupChannelsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GroupChannelsAPI {

    /**

     - parameter channelUrl: (path)  
     - parameter inviteSendBirdGroupChannelCommand: (body)  (optional)
     - returns: AnyPublisher<SendBirdGroupChannelModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2GroupchannelsChannelUrlInvitePost(channelUrl: String, inviteSendBirdGroupChannelCommand: InviteSendBirdGroupChannelCommand? = nil) -> AnyPublisher<SendBirdGroupChannelModel, Error> {
        var requestTask: RequestTask?
        return Future<SendBirdGroupChannelModel, Error> { promise in
            requestTask = apiV2GroupchannelsChannelUrlInvitePostWithRequestBuilder(channelUrl: channelUrl, inviteSendBirdGroupChannelCommand: inviteSendBirdGroupChannelCommand).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/v2/groupchannels/{channelUrl}/invite
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter channelUrl: (path)  
     - parameter inviteSendBirdGroupChannelCommand: (body)  (optional)
     - returns: RequestBuilder<SendBirdGroupChannelModel> 
     */
    open class func apiV2GroupchannelsChannelUrlInvitePostWithRequestBuilder(channelUrl: String, inviteSendBirdGroupChannelCommand: InviteSendBirdGroupChannelCommand? = nil) -> RequestBuilder<SendBirdGroupChannelModel> {
        var localVariablePath = "/api/v2/groupchannels/{channelUrl}/invite"
        let channelUrlPreEscape = "\(APIHelper.mapValueToPathItem(channelUrl))"
        let channelUrlPostEscape = channelUrlPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{channelUrl}", with: channelUrlPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inviteSendBirdGroupChannelCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SendBirdGroupChannelModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter dealId: (path)  
     - parameter hospitalId: (query)  (optional)
     - parameter isExternal: (query)  (optional)
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2GroupchannelsDealDealIdGet(dealId: UUID, hospitalId: UUID? = nil, isExternal: Bool? = nil) -> AnyPublisher<String, Error> {
        var requestTask: RequestTask?
        return Future<String, Error> { promise in
            requestTask = apiV2GroupchannelsDealDealIdGetWithRequestBuilder(dealId: dealId, hospitalId: hospitalId, isExternal: isExternal).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/v2/groupchannels/deal/{dealId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter dealId: (path)  
     - parameter hospitalId: (query)  (optional)
     - parameter isExternal: (query)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func apiV2GroupchannelsDealDealIdGetWithRequestBuilder(dealId: UUID, hospitalId: UUID? = nil, isExternal: Bool? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/api/v2/groupchannels/deal/{dealId}"
        let dealIdPreEscape = "\(APIHelper.mapValueToPathItem(dealId))"
        let dealIdPostEscape = dealIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealId}", with: dealIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hospitalId": hospitalId?.encodeToJSON(),
            "isExternal": isExternal?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter doctorId: (path)  
     - parameter hospitalId: (query)  (optional)
     - parameter isExternal: (query)  (optional)
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2GroupchannelsDoctorDoctorIdGet(doctorId: UUID, hospitalId: UUID? = nil, isExternal: Bool? = nil) -> AnyPublisher<String, Error> {
        var requestTask: RequestTask?
        return Future<String, Error> { promise in
            requestTask = apiV2GroupchannelsDoctorDoctorIdGetWithRequestBuilder(doctorId: doctorId, hospitalId: hospitalId, isExternal: isExternal).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/v2/groupchannels/doctor/{doctorId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter doctorId: (path)  
     - parameter hospitalId: (query)  (optional)
     - parameter isExternal: (query)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func apiV2GroupchannelsDoctorDoctorIdGetWithRequestBuilder(doctorId: UUID, hospitalId: UUID? = nil, isExternal: Bool? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/api/v2/groupchannels/doctor/{doctorId}"
        let doctorIdPreEscape = "\(APIHelper.mapValueToPathItem(doctorId))"
        let doctorIdPostEscape = doctorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{doctorId}", with: doctorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hospitalId": hospitalId?.encodeToJSON(),
            "isExternal": isExternal?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter hospitalId: (path)  
     - parameter isExternal: (query)  (optional)
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2GroupchannelsHospitalHospitalIdGet(hospitalId: UUID, isExternal: Bool? = nil) -> AnyPublisher<String, Error> {
        var requestTask: RequestTask?
        return Future<String, Error> { promise in
            requestTask = apiV2GroupchannelsHospitalHospitalIdGetWithRequestBuilder(hospitalId: hospitalId, isExternal: isExternal).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/v2/groupchannels/hospital/{hospitalId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter hospitalId: (path)  
     - parameter isExternal: (query)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func apiV2GroupchannelsHospitalHospitalIdGetWithRequestBuilder(hospitalId: UUID, isExternal: Bool? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/api/v2/groupchannels/hospital/{hospitalId}"
        let hospitalIdPreEscape = "\(APIHelper.mapValueToPathItem(hospitalId))"
        let hospitalIdPostEscape = hospitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hospitalId}", with: hospitalIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isExternal": isExternal?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
