//
// ExternalAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class ExternalAPI {
    /**
     Callback for Facebook user data deletion
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<FacebookUserDataDeletionResponseModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1ExternalFacebookDeleteuserdataPost(apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<FacebookUserDataDeletionResponseModel, Error> {
        return Future<FacebookUserDataDeletionResponseModel, Error>.init { promise in
            apiV1ExternalFacebookDeleteuserdataPostWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Callback for Facebook user data deletion
     - POST /api/v1/external/facebook/deleteuserdata
     - Sample request:        PUT /api/v1/external/facebook/deleteUserData      {          \"signed_request\": \"......\"      }
     - returns: RequestBuilder<FacebookUserDataDeletionResponseModel> 
     */
    open class func apiV1ExternalFacebookDeleteuserdataPostWithRequestBuilder() -> RequestBuilder<FacebookUserDataDeletionResponseModel> {
        let path = "/api/v1/external/facebook/deleteuserdata"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FacebookUserDataDeletionResponseModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
