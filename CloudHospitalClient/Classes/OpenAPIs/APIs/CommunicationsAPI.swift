//
// CommunicationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class CommunicationsAPI {
    /**
     Delete CommunicationUser.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Int, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2CommunicationsDelete(apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<Int, Error> {
        return Future<Int, Error>.init { promise in
            apiV2CommunicationsDeleteWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Delete CommunicationUser.
     - DELETE /api/v2/communications
     - OAuth:
       - type: oauth2
       - name: oauth2
     - returns: RequestBuilder<Int> 
     */
    open class func apiV2CommunicationsDeleteWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/api/v2/communications"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get CommunicationUser.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<CommunicationUserTokenModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2CommunicationsGet(apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<CommunicationUserTokenModel, Error> {
        return Future<CommunicationUserTokenModel, Error>.init { promise in
            apiV2CommunicationsGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get CommunicationUser.
     - GET /api/v2/communications
     - OAuth:
       - type: oauth2
       - name: oauth2
     - returns: RequestBuilder<CommunicationUserTokenModel> 
     */
    open class func apiV2CommunicationsGetWithRequestBuilder() -> RequestBuilder<CommunicationUserTokenModel> {
        let path = "/api/v2/communications"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommunicationUserTokenModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Revoke CommunicationUser.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<CommunicationUserTokenModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2CommunicationsPut(apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<CommunicationUserTokenModel, Error> {
        return Future<CommunicationUserTokenModel, Error>.init { promise in
            apiV2CommunicationsPutWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Revoke CommunicationUser.
     - PUT /api/v2/communications
     - OAuth:
       - type: oauth2
       - name: oauth2
     - returns: RequestBuilder<CommunicationUserTokenModel> 
     */
    open class func apiV2CommunicationsPutWithRequestBuilder() -> RequestBuilder<CommunicationUserTokenModel> {
        let path = "/api/v2/communications"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommunicationUserTokenModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
