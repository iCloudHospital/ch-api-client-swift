//
// ConsultationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class ConsultationsAPI {
    /**
     Get consultation.
     
     - parameter consultationId: (path)  
     - parameter languageCode: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<ConsultationModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2ConsultationsConsultationIdGet(consultationId: UUID, languageCode: String? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<ConsultationModel, Error> {
        return Future<ConsultationModel, Error>.init { promise in
            apiV2ConsultationsConsultationIdGetWithRequestBuilder(consultationId: consultationId, languageCode: languageCode).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get consultation.
     - GET /api/v2/consultations/{consultationId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter consultationId: (path)  
     - parameter languageCode: (query)  (optional)
     - returns: RequestBuilder<ConsultationModel> 
     */
    open class func apiV2ConsultationsConsultationIdGetWithRequestBuilder(consultationId: UUID, languageCode: String? = nil) -> RequestBuilder<ConsultationModel> {
        var path = "/api/v2/consultations/{consultationId}"
        let consultationIdPreEscape = "\(APIHelper.mapValueToPathItem(consultationId))"
        let consultationIdPostEscape = consultationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{consultationId}", with: consultationIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "languageCode": languageCode?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ConsultationModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Pay consultation.
     
     - parameter consultationId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2ConsultationsConsultationIdPayPost(consultationId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            apiV2ConsultationsConsultationIdPayPostWithRequestBuilder(consultationId: consultationId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Pay consultation.
     - POST /api/v2/consultations/{consultationId}/pay
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter consultationId: (path)  
     - returns: RequestBuilder<String> 
     */
    open class func apiV2ConsultationsConsultationIdPayPostWithRequestBuilder(consultationId: UUID) -> RequestBuilder<String> {
        var path = "/api/v2/consultations/{consultationId}/pay"
        let consultationIdPreEscape = "\(APIHelper.mapValueToPathItem(consultationId))"
        let consultationIdPostEscape = consultationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{consultationId}", with: consultationIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update consultation.
     
     - parameter consultationId: (path)  
     - parameter updateConsultationCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<ConsultationModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2ConsultationsConsultationIdPut(consultationId: UUID, updateConsultationCommand: UpdateConsultationCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<ConsultationModel, Error> {
        return Future<ConsultationModel, Error>.init { promise in
            apiV2ConsultationsConsultationIdPutWithRequestBuilder(consultationId: consultationId, updateConsultationCommand: updateConsultationCommand).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Update consultation.
     - PUT /api/v2/consultations/{consultationId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter consultationId: (path)  
     - parameter updateConsultationCommand: (body)  (optional)
     - returns: RequestBuilder<ConsultationModel> 
     */
    open class func apiV2ConsultationsConsultationIdPutWithRequestBuilder(consultationId: UUID, updateConsultationCommand: UpdateConsultationCommand? = nil) -> RequestBuilder<ConsultationModel> {
        var path = "/api/v2/consultations/{consultationId}"
        let consultationIdPreEscape = "\(APIHelper.mapValueToPathItem(consultationId))"
        let consultationIdPostEscape = consultationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{consultationId}", with: consultationIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateConsultationCommand)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConsultationModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all consultations.
     
     - parameter hospitalId: (query)  (optional)
     - parameter hospitalName: (query)  (optional)
     - parameter doctorId: (query)  (optional)
     - parameter doctorName: (query)  (optional)
     - parameter dealId: (query)  (optional)
     - parameter dealName: (query)  (optional)
     - parameter isOpen: (query)  (optional)
     - parameter isCompleted: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter consultationType: (query)  (optional)
     - parameter languageCode: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<ConsultationsModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2ConsultationsGet(hospitalId: UUID? = nil, hospitalName: String? = nil, doctorId: UUID? = nil, doctorName: String? = nil, dealId: UUID? = nil, dealName: String? = nil, isOpen: Bool? = nil, isCompleted: Bool? = nil, status: ConsultationStatus? = nil, consultationType: ConsultationType? = nil, languageCode: String? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<ConsultationsModel, Error> {
        return Future<ConsultationsModel, Error>.init { promise in
            apiV2ConsultationsGetWithRequestBuilder(hospitalId: hospitalId, hospitalName: hospitalName, doctorId: doctorId, doctorName: doctorName, dealId: dealId, dealName: dealName, isOpen: isOpen, isCompleted: isCompleted, status: status, consultationType: consultationType, languageCode: languageCode, page: page, limit: limit, lastRetrieved: lastRetrieved).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get all consultations.
     - GET /api/v2/consultations
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter hospitalId: (query)  (optional)
     - parameter hospitalName: (query)  (optional)
     - parameter doctorId: (query)  (optional)
     - parameter doctorName: (query)  (optional)
     - parameter dealId: (query)  (optional)
     - parameter dealName: (query)  (optional)
     - parameter isOpen: (query)  (optional)
     - parameter isCompleted: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter consultationType: (query)  (optional)
     - parameter languageCode: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - returns: RequestBuilder<ConsultationsModel> 
     */
    open class func apiV2ConsultationsGetWithRequestBuilder(hospitalId: UUID? = nil, hospitalName: String? = nil, doctorId: UUID? = nil, doctorName: String? = nil, dealId: UUID? = nil, dealName: String? = nil, isOpen: Bool? = nil, isCompleted: Bool? = nil, status: ConsultationStatus? = nil, consultationType: ConsultationType? = nil, languageCode: String? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil) -> RequestBuilder<ConsultationsModel> {
        let path = "/api/v2/consultations"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "HospitalId": hospitalId?.encodeToJSON(), 
            "HospitalName": hospitalName?.encodeToJSON(), 
            "DoctorId": doctorId?.encodeToJSON(), 
            "DoctorName": doctorName?.encodeToJSON(), 
            "DealId": dealId?.encodeToJSON(), 
            "DealName": dealName?.encodeToJSON(), 
            "IsOpen": isOpen?.encodeToJSON(), 
            "IsCompleted": isCompleted?.encodeToJSON(), 
            "Status": status?.encodeToJSON(), 
            "ConsultationType": consultationType?.encodeToJSON(), 
            "LanguageCode": languageCode?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "lastRetrieved": lastRetrieved?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ConsultationsModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create consultation.
     
     - parameter requestId: (path)  
     - parameter createConsultationCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<ConsultationModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2ConsultationsRequestIdPost(requestId: UUID, createConsultationCommand: CreateConsultationCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<ConsultationModel, Error> {
        return Future<ConsultationModel, Error>.init { promise in
            apiV2ConsultationsRequestIdPostWithRequestBuilder(requestId: requestId, createConsultationCommand: createConsultationCommand).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Create consultation.
     - POST /api/v2/consultations/{requestId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter requestId: (path)  
     - parameter createConsultationCommand: (body)  (optional)
     - returns: RequestBuilder<ConsultationModel> 
     */
    open class func apiV2ConsultationsRequestIdPostWithRequestBuilder(requestId: UUID, createConsultationCommand: CreateConsultationCommand? = nil) -> RequestBuilder<ConsultationModel> {
        var path = "/api/v2/consultations/{requestId}"
        let requestIdPreEscape = "\(APIHelper.mapValueToPathItem(requestId))"
        let requestIdPostEscape = requestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{requestId}", with: requestIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createConsultationCommand)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConsultationModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
