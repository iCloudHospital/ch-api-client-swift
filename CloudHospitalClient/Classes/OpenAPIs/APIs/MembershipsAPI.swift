//
// MembershipsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class MembershipsAPI {
    /**
     Get all memberships.
     
     - parameter id: (query)  (optional)
     - parameter planId: (query)  (optional)
     - parameter planName: (query)  (optional)
     - parameter ownerId: (query)  (optional)
     - parameter ownerName: (query)  (optional)
     - parameter isActive: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<MembershipsModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2MembershipsGet(id: UUID? = nil, planId: UUID? = nil, planName: String? = nil, ownerId: UUID? = nil, ownerName: String? = nil, isActive: Bool? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<MembershipsModel, Error> {
        return Future<MembershipsModel, Error>.init { promise in
            apiV2MembershipsGetWithRequestBuilder(id: id, planId: planId, planName: planName, ownerId: ownerId, ownerName: ownerName, isActive: isActive, page: page, limit: limit, lastRetrieved: lastRetrieved).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get all memberships.
     - GET /api/v2/memberships
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (query)  (optional)
     - parameter planId: (query)  (optional)
     - parameter planName: (query)  (optional)
     - parameter ownerId: (query)  (optional)
     - parameter ownerName: (query)  (optional)
     - parameter isActive: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - returns: RequestBuilder<MembershipsModel> 
     */
    open class func apiV2MembershipsGetWithRequestBuilder(id: UUID? = nil, planId: UUID? = nil, planName: String? = nil, ownerId: UUID? = nil, ownerName: String? = nil, isActive: Bool? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil) -> RequestBuilder<MembershipsModel> {
        let path = "/api/v2/memberships"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": id?.encodeToJSON(), 
            "PlanId": planId?.encodeToJSON(), 
            "PlanName": planName?.encodeToJSON(), 
            "OwnerId": ownerId?.encodeToJSON(), 
            "OwnerName": ownerName?.encodeToJSON(), 
            "IsActive": isActive?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "lastRetrieved": lastRetrieved?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<MembershipsModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get membership.
     
     - parameter membershipId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<MembershipModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2MembershipsMembershipIdGet(membershipId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<MembershipModel, Error> {
        return Future<MembershipModel, Error>.init { promise in
            apiV2MembershipsMembershipIdGetWithRequestBuilder(membershipId: membershipId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get membership.
     - GET /api/v2/memberships/{membershipId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter membershipId: (path)  
     - returns: RequestBuilder<MembershipModel> 
     */
    open class func apiV2MembershipsMembershipIdGetWithRequestBuilder(membershipId: UUID) -> RequestBuilder<MembershipModel> {
        var path = "/api/v2/memberships/{membershipId}"
        let membershipIdPreEscape = "\(APIHelper.mapValueToPathItem(membershipId))"
        let membershipIdPostEscape = membershipIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{membershipId}", with: membershipIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MembershipModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all members.
     
     - parameter membershipId: (path)  
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<MembersModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV2MembershipsMembershipIdMembersGet(membershipId: UUID, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<MembersModel, Error> {
        return Future<MembersModel, Error>.init { promise in
            apiV2MembershipsMembershipIdMembersGetWithRequestBuilder(membershipId: membershipId, page: page, limit: limit, lastRetrieved: lastRetrieved).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get all members.
     - GET /api/v2/memberships/{membershipId}/members
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter membershipId: (path)  
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - returns: RequestBuilder<MembersModel> 
     */
    open class func apiV2MembershipsMembershipIdMembersGetWithRequestBuilder(membershipId: UUID, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil) -> RequestBuilder<MembersModel> {
        var path = "/api/v2/memberships/{membershipId}/members"
        let membershipIdPreEscape = "\(APIHelper.mapValueToPathItem(membershipId))"
        let membershipIdPostEscape = membershipIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{membershipId}", with: membershipIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "lastRetrieved": lastRetrieved?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<MembersModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
