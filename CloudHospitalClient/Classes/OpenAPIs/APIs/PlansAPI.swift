//
// PlansAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class PlansAPI {
    /**
     Get current plan
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<PlanViewModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1PlansCurrentGet(apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<PlanViewModel, Error> {
        return Future<PlanViewModel, Error>.init { promise in
            apiV1PlansCurrentGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get current plan
     - GET /api/v1/plans/current
     - OAuth:
       - type: oauth2
       - name: oauth2
     - returns: RequestBuilder<PlanViewModel> 
     */
    open class func apiV1PlansCurrentGetWithRequestBuilder() -> RequestBuilder<PlanViewModel> {
        let path = "/api/v1/plans/current"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PlanViewModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all plans.
     
     - parameter id: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter current: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<PlansViewModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1PlansGet(id: UUID? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, current: Bool? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<PlansViewModel, Error> {
        return Future<PlansViewModel, Error>.init { promise in
            apiV1PlansGetWithRequestBuilder(id: id, page: page, limit: limit, lastRetrieved: lastRetrieved, current: current).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get all plans.
     - GET /api/v1/plans
     - parameter id: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter current: (query)  (optional)
     - returns: RequestBuilder<PlansViewModel> 
     */
    open class func apiV1PlansGetWithRequestBuilder(id: UUID? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, current: Bool? = nil) -> RequestBuilder<PlansViewModel> {
        let path = "/api/v1/plans"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": id?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "lastRetrieved": lastRetrieved?.encodeToJSON(), 
            "Current": current?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PlansViewModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get plan.
     
     - parameter planId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<PlanViewModel, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1PlansPlanIdGet(planId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<PlanViewModel, Error> {
        return Future<PlanViewModel, Error>.init { promise in
            apiV1PlansPlanIdGetWithRequestBuilder(planId: planId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Get plan.
     - GET /api/v1/plans/{planId}
     - parameter planId: (path)  
     - returns: RequestBuilder<PlanViewModel> 
     */
    open class func apiV1PlansPlanIdGetWithRequestBuilder(planId: UUID) -> RequestBuilder<PlanViewModel> {
        var path = "/api/v1/plans/{planId}"
        let planIdPreEscape = "\(APIHelper.mapValueToPathItem(planId))"
        let planIdPostEscape = planIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{planId}", with: planIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PlanViewModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Subscribe plan.
     
     - parameter planId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1PlansPlanIdSubscribePost(planId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<String, Error> {
        return Future<String, Error>.init { promise in
            apiV1PlansPlanIdSubscribePostWithRequestBuilder(planId: planId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Subscribe plan.
     - POST /api/v1/plans/{planId}/subscribe
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter planId: (path)  
     - returns: RequestBuilder<String> 
     */
    open class func apiV1PlansPlanIdSubscribePostWithRequestBuilder(planId: UUID) -> RequestBuilder<String> {
        var path = "/api/v1/plans/{planId}/subscribe"
        let planIdPreEscape = "\(APIHelper.mapValueToPathItem(planId))"
        let planIdPostEscape = planIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{planId}", with: planIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unsubscribe plan.
     
     - parameter planId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Bool, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1PlansPlanIdUnsubscribePost(planId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error>.init { promise in
            apiV1PlansPlanIdUnsubscribePostWithRequestBuilder(planId: planId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Unsubscribe plan.
     - POST /api/v1/plans/{planId}/unsubscribe
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter planId: (path)  
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV1PlansPlanIdUnsubscribePostWithRequestBuilder(planId: UUID) -> RequestBuilder<Bool> {
        var path = "/api/v1/plans/{planId}/unsubscribe"
        let planIdPreEscape = "\(APIHelper.mapValueToPathItem(planId))"
        let planIdPostEscape = planIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{planId}", with: planIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
