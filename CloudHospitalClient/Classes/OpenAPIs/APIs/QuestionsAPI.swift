//
// QuestionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension CloudHospitalClientAPI {


open class QuestionsAPI {
    /**
     Create an question.
     
     - parameter hospitalId: (path)  
     - parameter createQuestionCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1HospitalsHospitalIdQuestionsPost(hospitalId: UUID, createQuestionCommand: CreateQuestionCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue, completion: @escaping ((_ data: UUID?,_ error: Error?) -> Void)) {
        apiV1HospitalsHospitalIdQuestionsPostWithRequestBuilder(hospitalId: hospitalId, createQuestionCommand: createQuestionCommand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an question.
     - POST /api/v1/hospitals/{hospitalId}/questions
     - Sample request:        POST /api/v1/hospitals/1/questions      {          \"title\": \"Hospital question\",          \"description\": \"This is a question.\",          \"body\": \"question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter hospitalId: (path)  
     - parameter createQuestionCommand: (body)  (optional)
     - returns: RequestBuilder<UUID> 
     */
    open class func apiV1HospitalsHospitalIdQuestionsPostWithRequestBuilder(hospitalId: UUID, createQuestionCommand: CreateQuestionCommand? = nil) -> RequestBuilder<UUID> {
        var path = "/api/v1/hospitals/{hospitalId}/questions"
        let hospitalIdPreEscape = "\(APIHelper.mapValueToPathItem(hospitalId))"
        let hospitalIdPostEscape = hospitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hospitalId}", with: hospitalIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createQuestionCommand)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UUID>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete question.
     
     - parameter hospitalId: (path)  
     - parameter questionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1HospitalsHospitalIdQuestionsQuestionIdDelete(hospitalId: UUID, questionId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        apiV1HospitalsHospitalIdQuestionsQuestionIdDeleteWithRequestBuilder(hospitalId: hospitalId, questionId: questionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete question.
     - DELETE /api/v1/hospitals/{hospitalId}/questions/{questionId}
     - Sample request:        DELETE /api/v1/hospitals/1/questions/1
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter hospitalId: (path)  
     - parameter questionId: (path)  
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV1HospitalsHospitalIdQuestionsQuestionIdDeleteWithRequestBuilder(hospitalId: UUID, questionId: UUID) -> RequestBuilder<Bool> {
        var path = "/api/v1/hospitals/{hospitalId}/questions/{questionId}"
        let hospitalIdPreEscape = "\(APIHelper.mapValueToPathItem(hospitalId))"
        let hospitalIdPostEscape = hospitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hospitalId}", with: hospitalIdPostEscape, options: .literal, range: nil)
        let questionIdPreEscape = "\(APIHelper.mapValueToPathItem(questionId))"
        let questionIdPostEscape = questionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{questionId}", with: questionIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get question.
     
     - parameter hospitalId: (path)  
     - parameter questionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1HospitalsHospitalIdQuestionsQuestionIdGet(hospitalId: UUID, questionId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuestionViewModel?,_ error: Error?) -> Void)) {
        apiV1HospitalsHospitalIdQuestionsQuestionIdGetWithRequestBuilder(hospitalId: hospitalId, questionId: questionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get question.
     - GET /api/v1/hospitals/{hospitalId}/questions/{questionId}
     - Sample request:        GET /api/v1/hospitals/1/questions/1
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter hospitalId: (path)  
     - parameter questionId: (path)  
     - returns: RequestBuilder<QuestionViewModel> 
     */
    open class func apiV1HospitalsHospitalIdQuestionsQuestionIdGetWithRequestBuilder(hospitalId: UUID, questionId: UUID) -> RequestBuilder<QuestionViewModel> {
        var path = "/api/v1/hospitals/{hospitalId}/questions/{questionId}"
        let hospitalIdPreEscape = "\(APIHelper.mapValueToPathItem(hospitalId))"
        let hospitalIdPostEscape = hospitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hospitalId}", with: hospitalIdPostEscape, options: .literal, range: nil)
        let questionIdPreEscape = "\(APIHelper.mapValueToPathItem(questionId))"
        let questionIdPostEscape = questionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{questionId}", with: questionIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QuestionViewModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update question.
     
     - parameter hospitalId: (path)  
     - parameter questionId: (path)  
     - parameter updateQuestionCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1HospitalsHospitalIdQuestionsQuestionIdPut(hospitalId: UUID, questionId: UUID, updateQuestionCommand: UpdateQuestionCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        apiV1HospitalsHospitalIdQuestionsQuestionIdPutWithRequestBuilder(hospitalId: hospitalId, questionId: questionId, updateQuestionCommand: updateQuestionCommand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update question.
     - PUT /api/v1/hospitals/{hospitalId}/questions/{questionId}
     - Sample request:        PUT /api/v1/hospitals/1/questions/1      {          \"title\": \"Samsung Hospital\",          \"description\": \"This is an question.\",          \"body\": \"updated question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,        ///                   \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter hospitalId: (path)  
     - parameter questionId: (path)  
     - parameter updateQuestionCommand: (body)  (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV1HospitalsHospitalIdQuestionsQuestionIdPutWithRequestBuilder(hospitalId: UUID, questionId: UUID, updateQuestionCommand: UpdateQuestionCommand? = nil) -> RequestBuilder<Bool> {
        var path = "/api/v1/hospitals/{hospitalId}/questions/{questionId}"
        let hospitalIdPreEscape = "\(APIHelper.mapValueToPathItem(hospitalId))"
        let hospitalIdPostEscape = hospitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hospitalId}", with: hospitalIdPostEscape, options: .literal, range: nil)
        let questionIdPreEscape = "\(APIHelper.mapValueToPathItem(questionId))"
        let questionIdPostEscape = questionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{questionId}", with: questionIdPostEscape, options: .literal, range: nil)
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateQuestionCommand)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all questions.
     
     - parameter id: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter hospitalId: (query)  (optional)
     - parameter patientId: (query)  (optional)
     - parameter questionType: (query)  (optional)
     - parameter questionStatus: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter current: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1HospitalsQuestionsGet(id: UUID? = nil, title: String? = nil, hospitalId: UUID? = nil, patientId: UUID? = nil, questionType: QuestionType? = nil, questionStatus: QuestionStatus? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, current: Bool? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuestionsViewModel?,_ error: Error?) -> Void)) {
        apiV1HospitalsQuestionsGetWithRequestBuilder(id: id, title: title, hospitalId: hospitalId, patientId: patientId, questionType: questionType, questionStatus: questionStatus, page: page, limit: limit, lastRetrieved: lastRetrieved, current: current).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all questions.
     - GET /api/v1/hospitals/questions
     - Sample request:        GET /api/v1/hospitals/1/questions
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter hospitalId: (query)  (optional)
     - parameter patientId: (query)  (optional)
     - parameter questionType: (query)  (optional)
     - parameter questionStatus: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter current: (query)  (optional)
     - returns: RequestBuilder<QuestionsViewModel> 
     */
    open class func apiV1HospitalsQuestionsGetWithRequestBuilder(id: UUID? = nil, title: String? = nil, hospitalId: UUID? = nil, patientId: UUID? = nil, questionType: QuestionType? = nil, questionStatus: QuestionStatus? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, current: Bool? = nil) -> RequestBuilder<QuestionsViewModel> {
        let path = "/api/v1/hospitals/questions"
        let URLString = CloudHospitalClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": id?.encodeToJSON(), 
            "Title": title?.encodeToJSON(), 
            "HospitalId": hospitalId?.encodeToJSON(), 
            "PatientId": patientId?.encodeToJSON(), 
            "QuestionType": questionType?.encodeToJSON(), 
            "QuestionStatus": questionStatus?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "lastRetrieved": lastRetrieved?.encodeToJSON(), 
            "Current": current?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<QuestionsViewModel>.Type = CloudHospitalClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
}
