//
// SendBirdGroupChannelMember.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SendBirdGroupChannelMember: Codable, JSONEncodable, Hashable {

    public var userId: String?
    public var nickname: String?
    public var profileUrl: String?
    public var isActive: Bool?
    public var isOnline: Bool?
    public var friendDiscoveryKey: [String]?
    public var lastSeenAt: Int64?
    public var state: String?
    public var role: String?
    public var metadata: Metadata?

    public init(userId: String? = nil, nickname: String? = nil, profileUrl: String? = nil, isActive: Bool? = nil, isOnline: Bool? = nil, friendDiscoveryKey: [String]? = nil, lastSeenAt: Int64? = nil, state: String? = nil, role: String? = nil, metadata: Metadata? = nil) {
        self.userId = userId
        self.nickname = nickname
        self.profileUrl = profileUrl
        self.isActive = isActive
        self.isOnline = isOnline
        self.friendDiscoveryKey = friendDiscoveryKey
        self.lastSeenAt = lastSeenAt
        self.state = state
        self.role = role
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId = "user_id"
        case nickname
        case profileUrl = "profile_url"
        case isActive = "is_active"
        case isOnline = "is_online"
        case friendDiscoveryKey = "friend_discovery_key"
        case lastSeenAt = "last_seen_at"
        case state
        case role
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(nickname, forKey: .nickname)
        try container.encodeIfPresent(profileUrl, forKey: .profileUrl)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(isOnline, forKey: .isOnline)
        try container.encodeIfPresent(friendDiscoveryKey, forKey: .friendDiscoveryKey)
        try container.encodeIfPresent(lastSeenAt, forKey: .lastSeenAt)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(role, forKey: .role)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

