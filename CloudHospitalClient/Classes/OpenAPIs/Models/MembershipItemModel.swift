//
// MembershipItemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MembershipItemModel: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var planId: UUID?
    public var planName: String?
    public var patientId: UUID?
    public var patientName: String?
    public var memberCount: Int?
    public var isActive: Bool?
    public var subscription: SubscriptionModel?

    public init(id: UUID? = nil, planId: UUID? = nil, planName: String? = nil, patientId: UUID? = nil, patientName: String? = nil, memberCount: Int? = nil, isActive: Bool? = nil, subscription: SubscriptionModel? = nil) {
        self.id = id
        self.planId = planId
        self.planName = planName
        self.patientId = patientId
        self.patientName = patientName
        self.memberCount = memberCount
        self.isActive = isActive
        self.subscription = subscription
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case planId
        case planName
        case patientId
        case patientName
        case memberCount
        case isActive
        case subscription
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(planId, forKey: .planId)
        try container.encodeIfPresent(planName, forKey: .planName)
        try container.encodeIfPresent(patientId, forKey: .patientId)
        try container.encodeIfPresent(patientName, forKey: .patientName)
        try container.encodeIfPresent(memberCount, forKey: .memberCount)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(subscription, forKey: .subscription)
    }
}

