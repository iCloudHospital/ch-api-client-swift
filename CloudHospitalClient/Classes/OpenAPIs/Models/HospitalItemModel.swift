//
// HospitalItemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct HospitalItemModel: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var languageCode: String?
    public var name: String?
    public var slug: String?
    public var confirmed: Bool?
    public var logo: String?
    public var marketingType: MarketingType?
    public var consultationEnabled: Bool?
    public var consultationFee: Double?
    public var timeZone: String?
    public var websiteUrl: String?
    public var paymentEnabled: Bool?
    public var countryId: UUID?
    public var specialtiesSummerized: String?
    public var accreditations: [HospitalAccreditationItemModel]?
    public var medias: [MediaModel]?
    public var location: LocationModel?

    public init(id: UUID? = nil, languageCode: String? = nil, name: String? = nil, slug: String? = nil, confirmed: Bool? = nil, logo: String? = nil, marketingType: MarketingType? = nil, consultationEnabled: Bool? = nil, consultationFee: Double? = nil, timeZone: String? = nil, websiteUrl: String? = nil, paymentEnabled: Bool? = nil, countryId: UUID? = nil, specialtiesSummerized: String? = nil, accreditations: [HospitalAccreditationItemModel]? = nil, medias: [MediaModel]? = nil, location: LocationModel? = nil) {
        self.id = id
        self.languageCode = languageCode
        self.name = name
        self.slug = slug
        self.confirmed = confirmed
        self.logo = logo
        self.marketingType = marketingType
        self.consultationEnabled = consultationEnabled
        self.consultationFee = consultationFee
        self.timeZone = timeZone
        self.websiteUrl = websiteUrl
        self.paymentEnabled = paymentEnabled
        self.countryId = countryId
        self.specialtiesSummerized = specialtiesSummerized
        self.accreditations = accreditations
        self.medias = medias
        self.location = location
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case languageCode
        case name
        case slug
        case confirmed
        case logo
        case marketingType
        case consultationEnabled
        case consultationFee
        case timeZone
        case websiteUrl
        case paymentEnabled
        case countryId
        case specialtiesSummerized
        case accreditations
        case medias
        case location
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(languageCode, forKey: .languageCode)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(confirmed, forKey: .confirmed)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(marketingType, forKey: .marketingType)
        try container.encodeIfPresent(consultationEnabled, forKey: .consultationEnabled)
        try container.encodeIfPresent(consultationFee, forKey: .consultationFee)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
        try container.encodeIfPresent(websiteUrl, forKey: .websiteUrl)
        try container.encodeIfPresent(paymentEnabled, forKey: .paymentEnabled)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(specialtiesSummerized, forKey: .specialtiesSummerized)
        try container.encodeIfPresent(accreditations, forKey: .accreditations)
        try container.encodeIfPresent(medias, forKey: .medias)
        try container.encodeIfPresent(location, forKey: .location)
    }
}

