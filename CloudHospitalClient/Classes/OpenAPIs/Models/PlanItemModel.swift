//
// PlanItemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PlanItemModel: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var name: String?
    public var memberLimit: Int?
    public var unitPrice: Double?
    public var stripePriceId: String?
    public var interval: RecurringInterval?
    public var isActive: Bool?
    public var order: Int?

    public init(id: UUID? = nil, name: String? = nil, memberLimit: Int? = nil, unitPrice: Double? = nil, stripePriceId: String? = nil, interval: RecurringInterval? = nil, isActive: Bool? = nil, order: Int? = nil) {
        self.id = id
        self.name = name
        self.memberLimit = memberLimit
        self.unitPrice = unitPrice
        self.stripePriceId = stripePriceId
        self.interval = interval
        self.isActive = isActive
        self.order = order
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case memberLimit
        case unitPrice
        case stripePriceId
        case interval
        case isActive
        case order
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(memberLimit, forKey: .memberLimit)
        try container.encodeIfPresent(unitPrice, forKey: .unitPrice)
        try container.encodeIfPresent(stripePriceId, forKey: .stripePriceId)
        try container.encodeIfPresent(interval, forKey: .interval)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(order, forKey: .order)
    }
}

