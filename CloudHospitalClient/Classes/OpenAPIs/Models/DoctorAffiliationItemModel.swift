//
// DoctorAffiliationItemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DoctorAffiliationItemModel: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var languageCode: String?
    public var hospitalId: UUID?
    public var hospitalName: String?
    public var hospitalSlug: String?
    public var countryId: UUID?
    public var marketingType: MarketingType?
    public var doctorId: UUID?
    public var name: String?
    public var slug: String?
    public var confirmed: Bool?
    public var photo: String?
    public var photoThumbnail: String?
    public var consultationEnabled: Bool?
    public var consultationFee: Double?
    public var startPracticeDate: Date?
    public var yearOfExperience: Double?
    public var specialtiesSummerized: String?
    public var order: Int?

    public init(id: UUID? = nil, languageCode: String? = nil, hospitalId: UUID? = nil, hospitalName: String? = nil, hospitalSlug: String? = nil, countryId: UUID? = nil, marketingType: MarketingType? = nil, doctorId: UUID? = nil, name: String? = nil, slug: String? = nil, confirmed: Bool? = nil, photo: String? = nil, photoThumbnail: String? = nil, consultationEnabled: Bool? = nil, consultationFee: Double? = nil, startPracticeDate: Date? = nil, yearOfExperience: Double? = nil, specialtiesSummerized: String? = nil, order: Int? = nil) {
        self.id = id
        self.languageCode = languageCode
        self.hospitalId = hospitalId
        self.hospitalName = hospitalName
        self.hospitalSlug = hospitalSlug
        self.countryId = countryId
        self.marketingType = marketingType
        self.doctorId = doctorId
        self.name = name
        self.slug = slug
        self.confirmed = confirmed
        self.photo = photo
        self.photoThumbnail = photoThumbnail
        self.consultationEnabled = consultationEnabled
        self.consultationFee = consultationFee
        self.startPracticeDate = startPracticeDate
        self.yearOfExperience = yearOfExperience
        self.specialtiesSummerized = specialtiesSummerized
        self.order = order
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case languageCode
        case hospitalId
        case hospitalName
        case hospitalSlug
        case countryId
        case marketingType
        case doctorId
        case name
        case slug
        case confirmed
        case photo
        case photoThumbnail
        case consultationEnabled
        case consultationFee
        case startPracticeDate
        case yearOfExperience
        case specialtiesSummerized
        case order
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(languageCode, forKey: .languageCode)
        try container.encodeIfPresent(hospitalId, forKey: .hospitalId)
        try container.encodeIfPresent(hospitalName, forKey: .hospitalName)
        try container.encodeIfPresent(hospitalSlug, forKey: .hospitalSlug)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(marketingType, forKey: .marketingType)
        try container.encodeIfPresent(doctorId, forKey: .doctorId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(confirmed, forKey: .confirmed)
        try container.encodeIfPresent(photo, forKey: .photo)
        try container.encodeIfPresent(photoThumbnail, forKey: .photoThumbnail)
        try container.encodeIfPresent(consultationEnabled, forKey: .consultationEnabled)
        try container.encodeIfPresent(consultationFee, forKey: .consultationFee)
        try container.encodeIfPresent(startPracticeDate, forKey: .startPracticeDate)
        try container.encodeIfPresent(yearOfExperience, forKey: .yearOfExperience)
        try container.encodeIfPresent(specialtiesSummerized, forKey: .specialtiesSummerized)
        try container.encodeIfPresent(order, forKey: .order)
    }
}

