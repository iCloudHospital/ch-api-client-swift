//
// DoctorItemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DoctorItemModel: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var firstName: String?
    public var lastName: String?
    public var fullName: String?
    public var userType: String?
    public var photo: String?
    public var photoThumbnail: String?
    public var timeZone: String?

    public init(id: UUID? = nil, firstName: String? = nil, lastName: String? = nil, fullName: String? = nil, userType: String? = nil, photo: String? = nil, photoThumbnail: String? = nil, timeZone: String? = nil) {
        self.id = id
        self.firstName = firstName
        self.lastName = lastName
        self.fullName = fullName
        self.userType = userType
        self.photo = photo
        self.photoThumbnail = photoThumbnail
        self.timeZone = timeZone
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case firstName
        case lastName
        case fullName
        case userType
        case photo
        case photoThumbnail
        case timeZone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(userType, forKey: .userType)
        try container.encodeIfPresent(photo, forKey: .photo)
        try container.encodeIfPresent(photoThumbnail, forKey: .photoThumbnail)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
    }
}

