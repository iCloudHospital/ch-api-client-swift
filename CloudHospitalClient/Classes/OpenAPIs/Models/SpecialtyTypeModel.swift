//
// SpecialtyTypeModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SpecialtyTypeModel: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var languageCode: String?
    public var name: String?
    public var slug: String?
    public var confirmed: Bool?
    public var photo: String?
    public var photoThumbnail: String?
    public var background: String?
    public var backgroundThumbnail: String?
    public var description: String?
    public var marketingType: MarketingType?
    public var specialtiesCount: Int?
    public var medias: [MediaModel]?
    public var auditableEntity: AuditableEntity?
    public var content: String?
    public var localizedUrls: [LocalizedUrlModel]?
    public var customStyle: String?

    public init(id: UUID? = nil, languageCode: String? = nil, name: String? = nil, slug: String? = nil, confirmed: Bool? = nil, photo: String? = nil, photoThumbnail: String? = nil, background: String? = nil, backgroundThumbnail: String? = nil, description: String? = nil, marketingType: MarketingType? = nil, specialtiesCount: Int? = nil, medias: [MediaModel]? = nil, auditableEntity: AuditableEntity? = nil, content: String? = nil, localizedUrls: [LocalizedUrlModel]? = nil, customStyle: String? = nil) {
        self.id = id
        self.languageCode = languageCode
        self.name = name
        self.slug = slug
        self.confirmed = confirmed
        self.photo = photo
        self.photoThumbnail = photoThumbnail
        self.background = background
        self.backgroundThumbnail = backgroundThumbnail
        self.description = description
        self.marketingType = marketingType
        self.specialtiesCount = specialtiesCount
        self.medias = medias
        self.auditableEntity = auditableEntity
        self.content = content
        self.localizedUrls = localizedUrls
        self.customStyle = customStyle
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case languageCode
        case name
        case slug
        case confirmed
        case photo
        case photoThumbnail
        case background
        case backgroundThumbnail
        case description
        case marketingType
        case specialtiesCount
        case medias
        case auditableEntity
        case content
        case localizedUrls
        case customStyle
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(languageCode, forKey: .languageCode)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(confirmed, forKey: .confirmed)
        try container.encodeIfPresent(photo, forKey: .photo)
        try container.encodeIfPresent(photoThumbnail, forKey: .photoThumbnail)
        try container.encodeIfPresent(background, forKey: .background)
        try container.encodeIfPresent(backgroundThumbnail, forKey: .backgroundThumbnail)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(marketingType, forKey: .marketingType)
        try container.encodeIfPresent(specialtiesCount, forKey: .specialtiesCount)
        try container.encodeIfPresent(medias, forKey: .medias)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(localizedUrls, forKey: .localizedUrls)
        try container.encodeIfPresent(customStyle, forKey: .customStyle)
    }
}

