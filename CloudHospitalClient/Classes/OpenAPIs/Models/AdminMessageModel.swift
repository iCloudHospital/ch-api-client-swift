//
// AdminMessageModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdminMessageModel: Codable, JSONEncodable, Hashable {

    public var messageId: Int64?
    public var type: String?
    public var customType: String?
    public var channelUrl: String?
    public var mentionType: String?
    public var isRemoved: Bool?
    public var message: String?
    public var data: String?
    public var createdAt: Int64?
    public var updatedAt: Int64?

    public init(messageId: Int64? = nil, type: String? = nil, customType: String? = nil, channelUrl: String? = nil, mentionType: String? = nil, isRemoved: Bool? = nil, message: String? = nil, data: String? = nil, createdAt: Int64? = nil, updatedAt: Int64? = nil) {
        self.messageId = messageId
        self.type = type
        self.customType = customType
        self.channelUrl = channelUrl
        self.mentionType = mentionType
        self.isRemoved = isRemoved
        self.message = message
        self.data = data
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case messageId = "message_id"
        case type
        case customType = "custom_type"
        case channelUrl = "channel_url"
        case mentionType = "mention_type"
        case isRemoved = "is_removed"
        case message
        case data
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(messageId, forKey: .messageId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(customType, forKey: .customType)
        try container.encodeIfPresent(channelUrl, forKey: .channelUrl)
        try container.encodeIfPresent(mentionType, forKey: .mentionType)
        try container.encodeIfPresent(isRemoved, forKey: .isRemoved)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

