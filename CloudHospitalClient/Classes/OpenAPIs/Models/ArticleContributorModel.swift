//
// ArticleContributorModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ArticleContributorModel: Codable, JSONEncodable, Hashable {

    public var articleId: UUID?
    public var contributorId: UUID?
    public var languageCode: String?
    public var contributorName: String?
    public var contributorSlug: String?
    public var contributorConfirmed: Bool?
    public var contributorEmail: String?
    public var contributorPhoto: String?
    public var contributorPhotoThumbnail: String?
    public var type: ContributionType?
    public var filter: String?
    public var order: Int?
    public var auditableEntity: AuditableEntity?
    public var contributorDescription: String?
    public var contributorOverview: String?
    public var contributorContent: String?
    public var contributorSnsHandles: [SnsHandleModel]?
    public var localizedUrls: [LocalizedUrlModel]?

    public init(articleId: UUID? = nil, contributorId: UUID? = nil, languageCode: String? = nil, contributorName: String? = nil, contributorSlug: String? = nil, contributorConfirmed: Bool? = nil, contributorEmail: String? = nil, contributorPhoto: String? = nil, contributorPhotoThumbnail: String? = nil, type: ContributionType? = nil, filter: String? = nil, order: Int? = nil, auditableEntity: AuditableEntity? = nil, contributorDescription: String? = nil, contributorOverview: String? = nil, contributorContent: String? = nil, contributorSnsHandles: [SnsHandleModel]? = nil, localizedUrls: [LocalizedUrlModel]? = nil) {
        self.articleId = articleId
        self.contributorId = contributorId
        self.languageCode = languageCode
        self.contributorName = contributorName
        self.contributorSlug = contributorSlug
        self.contributorConfirmed = contributorConfirmed
        self.contributorEmail = contributorEmail
        self.contributorPhoto = contributorPhoto
        self.contributorPhotoThumbnail = contributorPhotoThumbnail
        self.type = type
        self.filter = filter
        self.order = order
        self.auditableEntity = auditableEntity
        self.contributorDescription = contributorDescription
        self.contributorOverview = contributorOverview
        self.contributorContent = contributorContent
        self.contributorSnsHandles = contributorSnsHandles
        self.localizedUrls = localizedUrls
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case articleId
        case contributorId
        case languageCode
        case contributorName
        case contributorSlug
        case contributorConfirmed
        case contributorEmail
        case contributorPhoto
        case contributorPhotoThumbnail
        case type
        case filter
        case order
        case auditableEntity
        case contributorDescription
        case contributorOverview
        case contributorContent
        case contributorSnsHandles
        case localizedUrls
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(articleId, forKey: .articleId)
        try container.encodeIfPresent(contributorId, forKey: .contributorId)
        try container.encodeIfPresent(languageCode, forKey: .languageCode)
        try container.encodeIfPresent(contributorName, forKey: .contributorName)
        try container.encodeIfPresent(contributorSlug, forKey: .contributorSlug)
        try container.encodeIfPresent(contributorConfirmed, forKey: .contributorConfirmed)
        try container.encodeIfPresent(contributorEmail, forKey: .contributorEmail)
        try container.encodeIfPresent(contributorPhoto, forKey: .contributorPhoto)
        try container.encodeIfPresent(contributorPhotoThumbnail, forKey: .contributorPhotoThumbnail)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(filter, forKey: .filter)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
        try container.encodeIfPresent(contributorDescription, forKey: .contributorDescription)
        try container.encodeIfPresent(contributorOverview, forKey: .contributorOverview)
        try container.encodeIfPresent(contributorContent, forKey: .contributorContent)
        try container.encodeIfPresent(contributorSnsHandles, forKey: .contributorSnsHandles)
        try container.encodeIfPresent(localizedUrls, forKey: .localizedUrls)
    }
}

