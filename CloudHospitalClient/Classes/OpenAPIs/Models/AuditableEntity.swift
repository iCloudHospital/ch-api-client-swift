//
// AuditableEntity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AuditableEntity: Codable, JSONEncodable, Hashable {

    public var createdBy: UUID?
    public var updatedBy: UUID?
    public var deletedBy: UUID?
    public var createdDate: Date?
    public var updatedDate: Date?
    public var deletedDate: Date?
    public var isHidden: Bool?
    public var isDeleted: Bool?

    public init(createdBy: UUID? = nil, updatedBy: UUID? = nil, deletedBy: UUID? = nil, createdDate: Date? = nil, updatedDate: Date? = nil, deletedDate: Date? = nil, isHidden: Bool? = nil, isDeleted: Bool? = nil) {
        self.createdBy = createdBy
        self.updatedBy = updatedBy
        self.deletedBy = deletedBy
        self.createdDate = createdDate
        self.updatedDate = updatedDate
        self.deletedDate = deletedDate
        self.isHidden = isHidden
        self.isDeleted = isDeleted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdBy
        case updatedBy
        case deletedBy
        case createdDate
        case updatedDate
        case deletedDate
        case isHidden
        case isDeleted
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(updatedBy, forKey: .updatedBy)
        try container.encodeIfPresent(deletedBy, forKey: .deletedBy)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(updatedDate, forKey: .updatedDate)
        try container.encodeIfPresent(deletedDate, forKey: .deletedDate)
        try container.encodeIfPresent(isHidden, forKey: .isHidden)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
    }
}

