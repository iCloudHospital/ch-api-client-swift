//
// QuestionCommentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class QuestionCommentsAPI {

    /**
     Get all questionComment.
     
     - parameter questionId: (path)  
     - parameter id: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter questionId2: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter current: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<QuestionCommentsViewModel, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1QuestionsQuestionIdQuestioncommentsGet(questionId: UUID, id: UUID? = nil, userId: UUID? = nil, questionId2: UUID? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, current: Bool? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClient.apiResponseQueue) -> AnyPublisher<QuestionCommentsViewModel, Error> {
        return Future<QuestionCommentsViewModel, Error>.init { promise in
            apiV1QuestionsQuestionIdQuestioncommentsGetWithRequestBuilder(questionId: questionId, id: id, userId: userId, questionId2: questionId2, page: page, limit: limit, lastRetrieved: lastRetrieved, current: current).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get all questionComment.
     - GET /api/v1/questions/{questionId}/questioncomments
     - Sample request:        GET /api/v1/questionComment
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter questionId: (path)  
     - parameter id: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter questionId2: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter current: (query)  (optional)
     - returns: RequestBuilder<QuestionCommentsViewModel> 
     */
    open class func apiV1QuestionsQuestionIdQuestioncommentsGetWithRequestBuilder(questionId: UUID, id: UUID? = nil, userId: UUID? = nil, questionId2: UUID? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, current: Bool? = nil) -> RequestBuilder<QuestionCommentsViewModel> {
        var localVariablePath = "/api/v1/questions/{questionId}/questioncomments"
        let questionIdPreEscape = "\(APIHelper.mapValueToPathItem(questionId))"
        let questionIdPostEscape = questionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{questionId}", with: questionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": id?.encodeToJSON(),
            "UserId": userId?.encodeToJSON(),
            "QuestionId": questionId2?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "lastRetrieved": lastRetrieved?.encodeToJSON(),
            "Current": current?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuestionCommentsViewModel>.Type = CloudHospitalClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create an questionComment.
     
     - parameter questionId: (path)  
     - parameter createQuestionCommentCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<UUID, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1QuestionsQuestionIdQuestioncommentsPost(questionId: UUID, createQuestionCommentCommand: CreateQuestionCommentCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClient.apiResponseQueue) -> AnyPublisher<UUID, Error> {
        return Future<UUID, Error>.init { promise in
            apiV1QuestionsQuestionIdQuestioncommentsPostWithRequestBuilder(questionId: questionId, createQuestionCommentCommand: createQuestionCommentCommand).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Create an questionComment.
     - POST /api/v1/questions/{questionId}/questioncomments
     - Sample request:        POST /api/v1/questions/1/questionComment      {          \"description\": \"This is a questionComment.\",          \"body\": \"questionComment body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter questionId: (path)  
     - parameter createQuestionCommentCommand: (body)  (optional)
     - returns: RequestBuilder<UUID> 
     */
    open class func apiV1QuestionsQuestionIdQuestioncommentsPostWithRequestBuilder(questionId: UUID, createQuestionCommentCommand: CreateQuestionCommentCommand? = nil) -> RequestBuilder<UUID> {
        var localVariablePath = "/api/v1/questions/{questionId}/questioncomments"
        let questionIdPreEscape = "\(APIHelper.mapValueToPathItem(questionId))"
        let questionIdPostEscape = questionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{questionId}", with: questionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createQuestionCommentCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UUID>.Type = CloudHospitalClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete questionComment.
     
     - parameter questionId: (path)  
     - parameter questionCommentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Bool, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete(questionId: UUID, questionCommentId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClient.apiResponseQueue) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error>.init { promise in
            apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDeleteWithRequestBuilder(questionId: questionId, questionCommentId: questionCommentId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Delete questionComment.
     - DELETE /api/v1/questions/{questionId}/questioncomments/{questionCommentId}
     - Sample request:        DELETE /api/v1/questions/1/questionComments/1
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter questionId: (path)  
     - parameter questionCommentId: (path)  
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDeleteWithRequestBuilder(questionId: UUID, questionCommentId: UUID) -> RequestBuilder<Bool> {
        var localVariablePath = "/api/v1/questions/{questionId}/questioncomments/{questionCommentId}"
        let questionIdPreEscape = "\(APIHelper.mapValueToPathItem(questionId))"
        let questionIdPostEscape = questionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{questionId}", with: questionIdPostEscape, options: .literal, range: nil)
        let questionCommentIdPreEscape = "\(APIHelper.mapValueToPathItem(questionCommentId))"
        let questionCommentIdPostEscape = questionCommentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{questionCommentId}", with: questionCommentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get questionComment.
     
     - parameter questionId: (path)  
     - parameter questionCommentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<QuestionCommentViewModel, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet(questionId: UUID, questionCommentId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClient.apiResponseQueue) -> AnyPublisher<QuestionCommentViewModel, Error> {
        return Future<QuestionCommentViewModel, Error>.init { promise in
            apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGetWithRequestBuilder(questionId: questionId, questionCommentId: questionCommentId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get questionComment.
     - GET /api/v1/questions/{questionId}/questioncomments/{questionCommentId}
     - Sample request:        GET /api/v1/questionComment/1
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter questionId: (path)  
     - parameter questionCommentId: (path)  
     - returns: RequestBuilder<QuestionCommentViewModel> 
     */
    open class func apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGetWithRequestBuilder(questionId: UUID, questionCommentId: UUID) -> RequestBuilder<QuestionCommentViewModel> {
        var localVariablePath = "/api/v1/questions/{questionId}/questioncomments/{questionCommentId}"
        let questionIdPreEscape = "\(APIHelper.mapValueToPathItem(questionId))"
        let questionIdPostEscape = questionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{questionId}", with: questionIdPostEscape, options: .literal, range: nil)
        let questionCommentIdPreEscape = "\(APIHelper.mapValueToPathItem(questionCommentId))"
        let questionCommentIdPostEscape = questionCommentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{questionCommentId}", with: questionCommentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuestionCommentViewModel>.Type = CloudHospitalClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update questionComment.
     
     - parameter questionId: (path)  
     - parameter questionCommentId: (path)  
     - parameter updateQuestionCommentCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Bool, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut(questionId: UUID, questionCommentId: UUID, updateQuestionCommentCommand: UpdateQuestionCommentCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClient.apiResponseQueue) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error>.init { promise in
            apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPutWithRequestBuilder(questionId: questionId, questionCommentId: questionCommentId, updateQuestionCommentCommand: updateQuestionCommentCommand).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Update questionComment.
     - PUT /api/v1/questions/{questionId}/questioncomments/{questionCommentId}
     - Sample request:        PUT /api/v1/questions/1/questionComments/1      {          \"QuestionTitle\": \"Question title\",          \"body\": \"updated questionComment body here\"      }
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter questionId: (path)  
     - parameter questionCommentId: (path)  
     - parameter updateQuestionCommentCommand: (body)  (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPutWithRequestBuilder(questionId: UUID, questionCommentId: UUID, updateQuestionCommentCommand: UpdateQuestionCommentCommand? = nil) -> RequestBuilder<Bool> {
        var localVariablePath = "/api/v1/questions/{questionId}/questioncomments/{questionCommentId}"
        let questionIdPreEscape = "\(APIHelper.mapValueToPathItem(questionId))"
        let questionIdPostEscape = questionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{questionId}", with: questionIdPostEscape, options: .literal, range: nil)
        let questionCommentIdPreEscape = "\(APIHelper.mapValueToPathItem(questionCommentId))"
        let questionCommentIdPostEscape = questionCommentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{questionCommentId}", with: questionCommentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateQuestionCommentCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
