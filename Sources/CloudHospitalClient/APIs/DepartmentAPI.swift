//
// DepartmentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DepartmentAPI {

    /**
     Get all department.
     
     - parameter id: (query)  (optional)
     - parameter hospitalId: (query)  (optional)
     - parameter hospitalName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter additionalInfo: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter current: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<DepartmentsViewModel, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1HospitalsDepartmentsGet(id: UUID? = nil, hospitalId: UUID? = nil, hospitalName: String? = nil, name: String? = nil, additionalInfo: String? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, current: Bool? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClient.apiResponseQueue) -> AnyPublisher<DepartmentsViewModel, Error> {
        return Future<DepartmentsViewModel, Error>.init { promise in
            apiV1HospitalsDepartmentsGetWithRequestBuilder(id: id, hospitalId: hospitalId, hospitalName: hospitalName, name: name, additionalInfo: additionalInfo, page: page, limit: limit, lastRetrieved: lastRetrieved, current: current).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get all department.
     - GET /api/v1/hospitals/departments
     - Sample request:        GET /api/v1/hospitals/departments
     - parameter id: (query)  (optional)
     - parameter hospitalId: (query)  (optional)
     - parameter hospitalName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter additionalInfo: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter lastRetrieved: (query)  (optional)
     - parameter current: (query)  (optional)
     - returns: RequestBuilder<DepartmentsViewModel> 
     */
    open class func apiV1HospitalsDepartmentsGetWithRequestBuilder(id: UUID? = nil, hospitalId: UUID? = nil, hospitalName: String? = nil, name: String? = nil, additionalInfo: String? = nil, page: Int? = nil, limit: Int? = nil, lastRetrieved: Date? = nil, current: Bool? = nil) -> RequestBuilder<DepartmentsViewModel> {
        let localVariablePath = "/api/v1/hospitals/departments"
        let localVariableURLString = CloudHospitalClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": id?.encodeToJSON(),
            "HospitalId": hospitalId?.encodeToJSON(),
            "HospitalName": hospitalName?.encodeToJSON(),
            "Name": name?.encodeToJSON(),
            "AdditionalInfo": additionalInfo?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "lastRetrieved": lastRetrieved?.encodeToJSON(),
            "Current": current?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DepartmentsViewModel>.Type = CloudHospitalClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete department.
     
     - parameter hospitalId: (path)  
     - parameter departmentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Bool, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId: UUID, departmentId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClient.apiResponseQueue) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error>.init { promise in
            apiV1HospitalsHospitalIdDepartmentsDepartmentIdDeleteWithRequestBuilder(hospitalId: hospitalId, departmentId: departmentId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Delete department.
     - DELETE /api/v1/hospitals/{hospitalId}/departments/{departmentId}
     - Sample request:        DELETE /api/v1/hospitals/1/departments/1
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter hospitalId: (path)  
     - parameter departmentId: (path)  
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV1HospitalsHospitalIdDepartmentsDepartmentIdDeleteWithRequestBuilder(hospitalId: UUID, departmentId: UUID) -> RequestBuilder<Bool> {
        var localVariablePath = "/api/v1/hospitals/{hospitalId}/departments/{departmentId}"
        let hospitalIdPreEscape = "\(APIHelper.mapValueToPathItem(hospitalId))"
        let hospitalIdPostEscape = hospitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hospitalId}", with: hospitalIdPostEscape, options: .literal, range: nil)
        let departmentIdPreEscape = "\(APIHelper.mapValueToPathItem(departmentId))"
        let departmentIdPostEscape = departmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{departmentId}", with: departmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get department.
     
     - parameter hospitalId: (path)  
     - parameter departmentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<DepartmentViewModel, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId: UUID, departmentId: UUID, apiResponseQueue: DispatchQueue = CloudHospitalClient.apiResponseQueue) -> AnyPublisher<DepartmentViewModel, Error> {
        return Future<DepartmentViewModel, Error>.init { promise in
            apiV1HospitalsHospitalIdDepartmentsDepartmentIdGetWithRequestBuilder(hospitalId: hospitalId, departmentId: departmentId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get department.
     - GET /api/v1/hospitals/{hospitalId}/departments/{departmentId}
     - Sample request:        GET /api/v1/hospitals/1/departments/1
     - parameter hospitalId: (path)  
     - parameter departmentId: (path)  
     - returns: RequestBuilder<DepartmentViewModel> 
     */
    open class func apiV1HospitalsHospitalIdDepartmentsDepartmentIdGetWithRequestBuilder(hospitalId: UUID, departmentId: UUID) -> RequestBuilder<DepartmentViewModel> {
        var localVariablePath = "/api/v1/hospitals/{hospitalId}/departments/{departmentId}"
        let hospitalIdPreEscape = "\(APIHelper.mapValueToPathItem(hospitalId))"
        let hospitalIdPostEscape = hospitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hospitalId}", with: hospitalIdPostEscape, options: .literal, range: nil)
        let departmentIdPreEscape = "\(APIHelper.mapValueToPathItem(departmentId))"
        let departmentIdPostEscape = departmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{departmentId}", with: departmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DepartmentViewModel>.Type = CloudHospitalClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create department.
     
     - parameter hospitalId: (path)  
     - parameter departmentId: (path)  
     - parameter createDepartmentCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Department, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId: UUID, departmentId: String, createDepartmentCommand: CreateDepartmentCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClient.apiResponseQueue) -> AnyPublisher<Department, Error> {
        return Future<Department, Error>.init { promise in
            apiV1HospitalsHospitalIdDepartmentsDepartmentIdPostWithRequestBuilder(hospitalId: hospitalId, departmentId: departmentId, createDepartmentCommand: createDepartmentCommand).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Create department.
     - POST /api/v1/hospitals/{hospitalId}/departments/{departmentId}
     - Sample request:        POST /api/v1/hospitals/1/departments/1
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter hospitalId: (path)  
     - parameter departmentId: (path)  
     - parameter createDepartmentCommand: (body)  (optional)
     - returns: RequestBuilder<Department> 
     */
    open class func apiV1HospitalsHospitalIdDepartmentsDepartmentIdPostWithRequestBuilder(hospitalId: UUID, departmentId: String, createDepartmentCommand: CreateDepartmentCommand? = nil) -> RequestBuilder<Department> {
        var localVariablePath = "/api/v1/hospitals/{hospitalId}/departments/{departmentId}"
        let hospitalIdPreEscape = "\(APIHelper.mapValueToPathItem(hospitalId))"
        let hospitalIdPostEscape = hospitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hospitalId}", with: hospitalIdPostEscape, options: .literal, range: nil)
        let departmentIdPreEscape = "\(APIHelper.mapValueToPathItem(departmentId))"
        let departmentIdPostEscape = departmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{departmentId}", with: departmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDepartmentCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Department>.Type = CloudHospitalClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update department.
     
     - parameter hospitalId: (path)  
     - parameter departmentId: (path)  
     - parameter updateDepartmentCommand: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Bool, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId: UUID, departmentId: UUID, updateDepartmentCommand: UpdateDepartmentCommand? = nil, apiResponseQueue: DispatchQueue = CloudHospitalClient.apiResponseQueue) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error>.init { promise in
            apiV1HospitalsHospitalIdDepartmentsDepartmentIdPutWithRequestBuilder(hospitalId: hospitalId, departmentId: departmentId, updateDepartmentCommand: updateDepartmentCommand).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Update department.
     - PUT /api/v1/hospitals/{hospitalId}/departments/{departmentId}
     - Sample request:
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter hospitalId: (path)  
     - parameter departmentId: (path)  
     - parameter updateDepartmentCommand: (body)  (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func apiV1HospitalsHospitalIdDepartmentsDepartmentIdPutWithRequestBuilder(hospitalId: UUID, departmentId: UUID, updateDepartmentCommand: UpdateDepartmentCommand? = nil) -> RequestBuilder<Bool> {
        var localVariablePath = "/api/v1/hospitals/{hospitalId}/departments/{departmentId}"
        let hospitalIdPreEscape = "\(APIHelper.mapValueToPathItem(hospitalId))"
        let hospitalIdPostEscape = hospitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hospitalId}", with: hospitalIdPostEscape, options: .literal, range: nil)
        let departmentIdPreEscape = "\(APIHelper.mapValueToPathItem(departmentId))"
        let departmentIdPostEscape = departmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{departmentId}", with: departmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CloudHospitalClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateDepartmentCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = CloudHospitalClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
