//
// QuestionComment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QuestionComment: Codable, Hashable {

    public var id: UUID?
    public var userId: UUID?
    public var user: User?
    public var questionId: UUID?
    public var question: Question?
    public var body: String?
    public var medias: [Media]?
    public var auditableEntity: AuditableEntity?

    public init(id: UUID? = nil, userId: UUID? = nil, user: User? = nil, questionId: UUID? = nil, question: Question? = nil, body: String? = nil, medias: [Media]? = nil, auditableEntity: AuditableEntity? = nil) {
        self.id = id
        self.userId = userId
        self.user = user
        self.questionId = questionId
        self.question = question
        self.body = body
        self.medias = medias
        self.auditableEntity = auditableEntity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userId
        case user
        case questionId
        case question
        case body
        case medias
        case auditableEntity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(questionId, forKey: .questionId)
        try container.encodeIfPresent(question, forKey: .question)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(medias, forKey: .medias)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
    }
}

