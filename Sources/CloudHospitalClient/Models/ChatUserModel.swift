//
// ChatUserModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ChatUserModel: Codable, Hashable {

    public var id: String?
    public var nickname: String?
    public var profileUrl: String?
    public var accessToken: String?
    public var isActive: Int64?
    public var isOnline: Int64?
    public var discoveryKeys: [String]?
    public var createdAt: Date?
    public var lastSeenAt: Date?

    public init(id: String? = nil, nickname: String? = nil, profileUrl: String? = nil, accessToken: String? = nil, isActive: Int64? = nil, isOnline: Int64? = nil, discoveryKeys: [String]? = nil, createdAt: Date? = nil, lastSeenAt: Date? = nil) {
        self.id = id
        self.nickname = nickname
        self.profileUrl = profileUrl
        self.accessToken = accessToken
        self.isActive = isActive
        self.isOnline = isOnline
        self.discoveryKeys = discoveryKeys
        self.createdAt = createdAt
        self.lastSeenAt = lastSeenAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case nickname
        case profileUrl
        case accessToken
        case isActive
        case isOnline
        case discoveryKeys
        case createdAt
        case lastSeenAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(nickname, forKey: .nickname)
        try container.encodeIfPresent(profileUrl, forKey: .profileUrl)
        try container.encodeIfPresent(accessToken, forKey: .accessToken)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(isOnline, forKey: .isOnline)
        try container.encodeIfPresent(discoveryKeys, forKey: .discoveryKeys)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(lastSeenAt, forKey: .lastSeenAt)
    }
}

