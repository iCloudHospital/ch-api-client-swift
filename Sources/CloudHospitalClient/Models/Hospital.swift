//
// Hospital.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Hospital: Codable, Hashable {

    public var id: UUID?
    public var name: String?
    public var normalizedName: String?
    public var slug: String?
    public var description: String?
    public var normalizedDescription: String?
    public var logo: String?
    public var overview: String?
    public var bedsCount: Int?
    public var operationsPerYear: Int?
    public var foundationYear: Int?
    public var medicalStaffCount: Int?
    public var doctorCount: Int?
    public var countryId: UUID?
    public var country: Country?
    public var marketingType: MarketingType?
    public var consultationEnabled: Bool?
    public var consultationFee: Double?
    public var timeZone: String?
    public var articles: [Article]?
    public var questions: [Question]?
    public var deals: [Deal]?
    public var equipments: [Equipment]?
    public var reviews: [HospitalReview]?
    public var departments: [Department]?
    public var specialties: [HospitalSpecialty]?
    public var accreditations: [HospitalAccreditation]?
    public var doctorAffiliations: [DoctorAffiliation]?
    public var managerAffiliations: [ManagerAffiliation]?
    public var bookings: [Booking]?
    public var consultations: [Consultation]?
    public var evaluations: [HospitalEvaluation]?
    public var awards: [Award]?
    public var medias: [Media]?
    public var location: Location?
    public var auditableEntity: AuditableEntity?

    public init(id: UUID? = nil, name: String? = nil, normalizedName: String? = nil, slug: String? = nil, description: String? = nil, normalizedDescription: String? = nil, logo: String? = nil, overview: String? = nil, bedsCount: Int? = nil, operationsPerYear: Int? = nil, foundationYear: Int? = nil, medicalStaffCount: Int? = nil, doctorCount: Int? = nil, countryId: UUID? = nil, country: Country? = nil, marketingType: MarketingType? = nil, consultationEnabled: Bool? = nil, consultationFee: Double? = nil, timeZone: String? = nil, articles: [Article]? = nil, questions: [Question]? = nil, deals: [Deal]? = nil, equipments: [Equipment]? = nil, reviews: [HospitalReview]? = nil, departments: [Department]? = nil, specialties: [HospitalSpecialty]? = nil, accreditations: [HospitalAccreditation]? = nil, doctorAffiliations: [DoctorAffiliation]? = nil, managerAffiliations: [ManagerAffiliation]? = nil, bookings: [Booking]? = nil, consultations: [Consultation]? = nil, evaluations: [HospitalEvaluation]? = nil, awards: [Award]? = nil, medias: [Media]? = nil, location: Location? = nil, auditableEntity: AuditableEntity? = nil) {
        self.id = id
        self.name = name
        self.normalizedName = normalizedName
        self.slug = slug
        self.description = description
        self.normalizedDescription = normalizedDescription
        self.logo = logo
        self.overview = overview
        self.bedsCount = bedsCount
        self.operationsPerYear = operationsPerYear
        self.foundationYear = foundationYear
        self.medicalStaffCount = medicalStaffCount
        self.doctorCount = doctorCount
        self.countryId = countryId
        self.country = country
        self.marketingType = marketingType
        self.consultationEnabled = consultationEnabled
        self.consultationFee = consultationFee
        self.timeZone = timeZone
        self.articles = articles
        self.questions = questions
        self.deals = deals
        self.equipments = equipments
        self.reviews = reviews
        self.departments = departments
        self.specialties = specialties
        self.accreditations = accreditations
        self.doctorAffiliations = doctorAffiliations
        self.managerAffiliations = managerAffiliations
        self.bookings = bookings
        self.consultations = consultations
        self.evaluations = evaluations
        self.awards = awards
        self.medias = medias
        self.location = location
        self.auditableEntity = auditableEntity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case normalizedName
        case slug
        case description
        case normalizedDescription
        case logo
        case overview
        case bedsCount
        case operationsPerYear
        case foundationYear
        case medicalStaffCount
        case doctorCount
        case countryId
        case country
        case marketingType
        case consultationEnabled
        case consultationFee
        case timeZone
        case articles
        case questions
        case deals
        case equipments
        case reviews
        case departments
        case specialties
        case accreditations
        case doctorAffiliations
        case managerAffiliations
        case bookings
        case consultations
        case evaluations
        case awards
        case medias
        case location
        case auditableEntity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(normalizedName, forKey: .normalizedName)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(normalizedDescription, forKey: .normalizedDescription)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(bedsCount, forKey: .bedsCount)
        try container.encodeIfPresent(operationsPerYear, forKey: .operationsPerYear)
        try container.encodeIfPresent(foundationYear, forKey: .foundationYear)
        try container.encodeIfPresent(medicalStaffCount, forKey: .medicalStaffCount)
        try container.encodeIfPresent(doctorCount, forKey: .doctorCount)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(marketingType, forKey: .marketingType)
        try container.encodeIfPresent(consultationEnabled, forKey: .consultationEnabled)
        try container.encodeIfPresent(consultationFee, forKey: .consultationFee)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
        try container.encodeIfPresent(articles, forKey: .articles)
        try container.encodeIfPresent(questions, forKey: .questions)
        try container.encodeIfPresent(deals, forKey: .deals)
        try container.encodeIfPresent(equipments, forKey: .equipments)
        try container.encodeIfPresent(reviews, forKey: .reviews)
        try container.encodeIfPresent(departments, forKey: .departments)
        try container.encodeIfPresent(specialties, forKey: .specialties)
        try container.encodeIfPresent(accreditations, forKey: .accreditations)
        try container.encodeIfPresent(doctorAffiliations, forKey: .doctorAffiliations)
        try container.encodeIfPresent(managerAffiliations, forKey: .managerAffiliations)
        try container.encodeIfPresent(bookings, forKey: .bookings)
        try container.encodeIfPresent(consultations, forKey: .consultations)
        try container.encodeIfPresent(evaluations, forKey: .evaluations)
        try container.encodeIfPresent(awards, forKey: .awards)
        try container.encodeIfPresent(medias, forKey: .medias)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
    }
}

