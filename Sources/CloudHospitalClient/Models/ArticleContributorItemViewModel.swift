//
// ArticleContributorItemViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ArticleContributorItemViewModel: Codable, Hashable {

    public var contributorId: UUID?
    public var contributorName: String?
    public var contributorSlug: String?
    public var contributorEmail: String?
    public var contributorPhoto: String?
    public var contributorDescription: String?
    public var type: ContributionType?
    public var filter: String?
    public var order: Int?

    public init(contributorId: UUID? = nil, contributorName: String? = nil, contributorSlug: String? = nil, contributorEmail: String? = nil, contributorPhoto: String? = nil, contributorDescription: String? = nil, type: ContributionType? = nil, filter: String? = nil, order: Int? = nil) {
        self.contributorId = contributorId
        self.contributorName = contributorName
        self.contributorSlug = contributorSlug
        self.contributorEmail = contributorEmail
        self.contributorPhoto = contributorPhoto
        self.contributorDescription = contributorDescription
        self.type = type
        self.filter = filter
        self.order = order
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contributorId
        case contributorName
        case contributorSlug
        case contributorEmail
        case contributorPhoto
        case contributorDescription
        case type
        case filter
        case order
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(contributorId, forKey: .contributorId)
        try container.encodeIfPresent(contributorName, forKey: .contributorName)
        try container.encodeIfPresent(contributorSlug, forKey: .contributorSlug)
        try container.encodeIfPresent(contributorEmail, forKey: .contributorEmail)
        try container.encodeIfPresent(contributorPhoto, forKey: .contributorPhoto)
        try container.encodeIfPresent(contributorDescription, forKey: .contributorDescription)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(filter, forKey: .filter)
        try container.encodeIfPresent(order, forKey: .order)
    }
}

