//
// DealPackageModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DealPackageModel: Codable, Hashable {

    public var id: UUID?
    public var languageCode: String?
    public var dealId: UUID?
    public var dealName: String?
    public var dealSlug: String?
    public var hospitalId: UUID?
    public var hospitalName: String?
    public var hospitalSlug: String?
    public var refundPolicy: RefundPolicy?
    public var bonus: String?
    public var price: Double?
    public var auditableEntity: AuditableEntity?
    public var additionalServices: String?
    public var accomodation: String?
    public var transfer: String?

    public init(id: UUID? = nil, languageCode: String? = nil, dealId: UUID? = nil, dealName: String? = nil, dealSlug: String? = nil, hospitalId: UUID? = nil, hospitalName: String? = nil, hospitalSlug: String? = nil, refundPolicy: RefundPolicy? = nil, bonus: String? = nil, price: Double? = nil, auditableEntity: AuditableEntity? = nil, additionalServices: String? = nil, accomodation: String? = nil, transfer: String? = nil) {
        self.id = id
        self.languageCode = languageCode
        self.dealId = dealId
        self.dealName = dealName
        self.dealSlug = dealSlug
        self.hospitalId = hospitalId
        self.hospitalName = hospitalName
        self.hospitalSlug = hospitalSlug
        self.refundPolicy = refundPolicy
        self.bonus = bonus
        self.price = price
        self.auditableEntity = auditableEntity
        self.additionalServices = additionalServices
        self.accomodation = accomodation
        self.transfer = transfer
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case languageCode
        case dealId
        case dealName
        case dealSlug
        case hospitalId
        case hospitalName
        case hospitalSlug
        case refundPolicy
        case bonus
        case price
        case auditableEntity
        case additionalServices
        case accomodation
        case transfer
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(languageCode, forKey: .languageCode)
        try container.encodeIfPresent(dealId, forKey: .dealId)
        try container.encodeIfPresent(dealName, forKey: .dealName)
        try container.encodeIfPresent(dealSlug, forKey: .dealSlug)
        try container.encodeIfPresent(hospitalId, forKey: .hospitalId)
        try container.encodeIfPresent(hospitalName, forKey: .hospitalName)
        try container.encodeIfPresent(hospitalSlug, forKey: .hospitalSlug)
        try container.encodeIfPresent(refundPolicy, forKey: .refundPolicy)
        try container.encodeIfPresent(bonus, forKey: .bonus)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
        try container.encodeIfPresent(additionalServices, forKey: .additionalServices)
        try container.encodeIfPresent(accomodation, forKey: .accomodation)
        try container.encodeIfPresent(transfer, forKey: .transfer)
    }
}

