//
// QuestionCommentViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QuestionCommentViewModel: Codable, Hashable {

    public var id: UUID?
    public var userId: UUID?
    public var userName: String?
    public var fullName: String?
    public var questionId: UUID?
    public var questionTitle: String?
    public var body: String?
    public var auditableEntity: AuditableEntity?
    public var medias: [MediaViewModel]?

    public init(id: UUID? = nil, userId: UUID? = nil, userName: String? = nil, fullName: String? = nil, questionId: UUID? = nil, questionTitle: String? = nil, body: String? = nil, auditableEntity: AuditableEntity? = nil, medias: [MediaViewModel]? = nil) {
        self.id = id
        self.userId = userId
        self.userName = userName
        self.fullName = fullName
        self.questionId = questionId
        self.questionTitle = questionTitle
        self.body = body
        self.auditableEntity = auditableEntity
        self.medias = medias
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userId
        case userName
        case fullName
        case questionId
        case questionTitle
        case body
        case auditableEntity
        case medias
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(questionId, forKey: .questionId)
        try container.encodeIfPresent(questionTitle, forKey: .questionTitle)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
        try container.encodeIfPresent(medias, forKey: .medias)
    }
}

