//
// SpecialtyType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SpecialtyType: Codable, Hashable {

    public var id: UUID?
    public var name: String?
    public var normalizedName: String?
    public var slug: String?
    public var description: String?
    public var content: String?
    public var marketingType: MarketingType?
    public var specialtyTypeCategoryId: UUID?
    public var specialties: [Specialty]?
    public var medias: [Media]?
    public var auditableEntity: AuditableEntity?

    public init(id: UUID? = nil, name: String? = nil, normalizedName: String? = nil, slug: String? = nil, description: String? = nil, content: String? = nil, marketingType: MarketingType? = nil, specialtyTypeCategoryId: UUID? = nil, specialties: [Specialty]? = nil, medias: [Media]? = nil, auditableEntity: AuditableEntity? = nil) {
        self.id = id
        self.name = name
        self.normalizedName = normalizedName
        self.slug = slug
        self.description = description
        self.content = content
        self.marketingType = marketingType
        self.specialtyTypeCategoryId = specialtyTypeCategoryId
        self.specialties = specialties
        self.medias = medias
        self.auditableEntity = auditableEntity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case normalizedName
        case slug
        case description
        case content
        case marketingType
        case specialtyTypeCategoryId
        case specialties
        case medias
        case auditableEntity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(normalizedName, forKey: .normalizedName)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(marketingType, forKey: .marketingType)
        try container.encodeIfPresent(specialtyTypeCategoryId, forKey: .specialtyTypeCategoryId)
        try container.encodeIfPresent(specialties, forKey: .specialties)
        try container.encodeIfPresent(medias, forKey: .medias)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
    }
}

