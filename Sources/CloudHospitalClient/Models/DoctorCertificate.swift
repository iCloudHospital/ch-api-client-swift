//
// DoctorCertificate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DoctorCertificate: Codable, Hashable {

    public var id: UUID?
    public var doctorId: UUID?
    public var doctor: Doctor?
    public var certificate: String?
    public var normalizedCertificate: String?
    public var activeFrom: Date?
    public var activeTo: Date?

    public init(id: UUID? = nil, doctorId: UUID? = nil, doctor: Doctor? = nil, certificate: String? = nil, normalizedCertificate: String? = nil, activeFrom: Date? = nil, activeTo: Date? = nil) {
        self.id = id
        self.doctorId = doctorId
        self.doctor = doctor
        self.certificate = certificate
        self.normalizedCertificate = normalizedCertificate
        self.activeFrom = activeFrom
        self.activeTo = activeTo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case doctorId
        case doctor
        case certificate
        case normalizedCertificate
        case activeFrom
        case activeTo
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(doctorId, forKey: .doctorId)
        try container.encodeIfPresent(doctor, forKey: .doctor)
        try container.encodeIfPresent(certificate, forKey: .certificate)
        try container.encodeIfPresent(normalizedCertificate, forKey: .normalizedCertificate)
        try container.encodeIfPresent(activeFrom, forKey: .activeFrom)
        try container.encodeIfPresent(activeTo, forKey: .activeTo)
    }
}

