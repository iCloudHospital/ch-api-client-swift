//
// UpdateDoctorCommand.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateDoctorCommand: Codable, Hashable {

    public var firstName: String?
    public var lastName: String?
    public var phone: String?
    public var photo: String?
    public var photoThumbnail: String?
    public var gender: Gender?
    public var dateOfBirth: Date?
    public var languages: [UserLanguageViewModel]?
    public var locations: [UserLocationViewModel]?
    public var startPracticeDate: Date?
    public var overview: String?
    public var consultationEnabled: Bool?
    public var consultationFee: Double?
    public var doctorEducations: [DoctorEducationItemViewModel]?
    public var doctorPortfolios: [DoctorPortfolioItemViewModel]?
    public var doctorSpecialties: [DoctorSpecialtyItemViewModel]?
    public var doctorCertificates: [DoctorCertificateItemViewModel]?
    public var doctorAwards: [AwardViewModel]?

    public init(firstName: String? = nil, lastName: String? = nil, phone: String? = nil, photo: String? = nil, photoThumbnail: String? = nil, gender: Gender? = nil, dateOfBirth: Date? = nil, languages: [UserLanguageViewModel]? = nil, locations: [UserLocationViewModel]? = nil, startPracticeDate: Date? = nil, overview: String? = nil, consultationEnabled: Bool? = nil, consultationFee: Double? = nil, doctorEducations: [DoctorEducationItemViewModel]? = nil, doctorPortfolios: [DoctorPortfolioItemViewModel]? = nil, doctorSpecialties: [DoctorSpecialtyItemViewModel]? = nil, doctorCertificates: [DoctorCertificateItemViewModel]? = nil, doctorAwards: [AwardViewModel]? = nil) {
        self.firstName = firstName
        self.lastName = lastName
        self.phone = phone
        self.photo = photo
        self.photoThumbnail = photoThumbnail
        self.gender = gender
        self.dateOfBirth = dateOfBirth
        self.languages = languages
        self.locations = locations
        self.startPracticeDate = startPracticeDate
        self.overview = overview
        self.consultationEnabled = consultationEnabled
        self.consultationFee = consultationFee
        self.doctorEducations = doctorEducations
        self.doctorPortfolios = doctorPortfolios
        self.doctorSpecialties = doctorSpecialties
        self.doctorCertificates = doctorCertificates
        self.doctorAwards = doctorAwards
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstName
        case lastName
        case phone
        case photo
        case photoThumbnail
        case gender
        case dateOfBirth
        case languages
        case locations
        case startPracticeDate
        case overview
        case consultationEnabled
        case consultationFee
        case doctorEducations
        case doctorPortfolios
        case doctorSpecialties
        case doctorCertificates
        case doctorAwards
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(photo, forKey: .photo)
        try container.encodeIfPresent(photoThumbnail, forKey: .photoThumbnail)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(locations, forKey: .locations)
        try container.encodeIfPresent(startPracticeDate, forKey: .startPracticeDate)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(consultationEnabled, forKey: .consultationEnabled)
        try container.encodeIfPresent(consultationFee, forKey: .consultationFee)
        try container.encodeIfPresent(doctorEducations, forKey: .doctorEducations)
        try container.encodeIfPresent(doctorPortfolios, forKey: .doctorPortfolios)
        try container.encodeIfPresent(doctorSpecialties, forKey: .doctorSpecialties)
        try container.encodeIfPresent(doctorCertificates, forKey: .doctorCertificates)
        try container.encodeIfPresent(doctorAwards, forKey: .doctorAwards)
    }
}

