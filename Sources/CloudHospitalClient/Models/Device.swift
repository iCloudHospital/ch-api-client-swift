//
// Device.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Device: Codable, Hashable {

    public var id: UUID?
    public var token: String?
    public var platform: Platform?
    public var appAlert: Bool?
    public var eventAlert: Bool?
    public var noticeAlert: Bool?
    public var userId: UUID?
    public var user: User?
    public var deviceLogins: [DeviceLogin]?
    public var auditableEntity: AuditableEntity?

    public init(id: UUID? = nil, token: String? = nil, platform: Platform? = nil, appAlert: Bool? = nil, eventAlert: Bool? = nil, noticeAlert: Bool? = nil, userId: UUID? = nil, user: User? = nil, deviceLogins: [DeviceLogin]? = nil, auditableEntity: AuditableEntity? = nil) {
        self.id = id
        self.token = token
        self.platform = platform
        self.appAlert = appAlert
        self.eventAlert = eventAlert
        self.noticeAlert = noticeAlert
        self.userId = userId
        self.user = user
        self.deviceLogins = deviceLogins
        self.auditableEntity = auditableEntity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case token
        case platform
        case appAlert
        case eventAlert
        case noticeAlert
        case userId
        case user
        case deviceLogins
        case auditableEntity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(appAlert, forKey: .appAlert)
        try container.encodeIfPresent(eventAlert, forKey: .eventAlert)
        try container.encodeIfPresent(noticeAlert, forKey: .noticeAlert)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(deviceLogins, forKey: .deviceLogins)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
    }
}

