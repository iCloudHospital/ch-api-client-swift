//
// Payment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Payment: Codable, Hashable {

    public var id: UUID?
    public var paymentMethod: PaymentMethod?
    public var patientId: UUID?
    public var patient: Patient?
    public var customerId: String?
    public var customer: Customer?
    public var chargeId: String?
    public var refundId: String?
    public var chargeStatus: ChargeStatus?
    public var refundStatus: RefundStatus?
    public var paymentStatus: PaymentStatus?
    public var isFullPayment: Bool?
    public var currency: String?
    public var fee: Double?
    public var applicationFee: Double?
    public var cardBrand: String?
    public var cardLast4Digits: String?
    public var chargeStatusChangeLogs: [ChangeLog]?
    public var refundStatusChangeLogs: [ChangeLog]?
    public var paymentStatusChangeLogs: [ChangeLog]?

    public init(id: UUID? = nil, paymentMethod: PaymentMethod? = nil, patientId: UUID? = nil, patient: Patient? = nil, customerId: String? = nil, customer: Customer? = nil, chargeId: String? = nil, refundId: String? = nil, chargeStatus: ChargeStatus? = nil, refundStatus: RefundStatus? = nil, paymentStatus: PaymentStatus? = nil, isFullPayment: Bool? = nil, currency: String? = nil, fee: Double? = nil, applicationFee: Double? = nil, cardBrand: String? = nil, cardLast4Digits: String? = nil, chargeStatusChangeLogs: [ChangeLog]? = nil, refundStatusChangeLogs: [ChangeLog]? = nil, paymentStatusChangeLogs: [ChangeLog]? = nil) {
        self.id = id
        self.paymentMethod = paymentMethod
        self.patientId = patientId
        self.patient = patient
        self.customerId = customerId
        self.customer = customer
        self.chargeId = chargeId
        self.refundId = refundId
        self.chargeStatus = chargeStatus
        self.refundStatus = refundStatus
        self.paymentStatus = paymentStatus
        self.isFullPayment = isFullPayment
        self.currency = currency
        self.fee = fee
        self.applicationFee = applicationFee
        self.cardBrand = cardBrand
        self.cardLast4Digits = cardLast4Digits
        self.chargeStatusChangeLogs = chargeStatusChangeLogs
        self.refundStatusChangeLogs = refundStatusChangeLogs
        self.paymentStatusChangeLogs = paymentStatusChangeLogs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case paymentMethod
        case patientId
        case patient
        case customerId
        case customer
        case chargeId
        case refundId
        case chargeStatus
        case refundStatus
        case paymentStatus
        case isFullPayment
        case currency
        case fee
        case applicationFee
        case cardBrand
        case cardLast4Digits
        case chargeStatusChangeLogs
        case refundStatusChangeLogs
        case paymentStatusChangeLogs
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(paymentMethod, forKey: .paymentMethod)
        try container.encodeIfPresent(patientId, forKey: .patientId)
        try container.encodeIfPresent(patient, forKey: .patient)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(customer, forKey: .customer)
        try container.encodeIfPresent(chargeId, forKey: .chargeId)
        try container.encodeIfPresent(refundId, forKey: .refundId)
        try container.encodeIfPresent(chargeStatus, forKey: .chargeStatus)
        try container.encodeIfPresent(refundStatus, forKey: .refundStatus)
        try container.encodeIfPresent(paymentStatus, forKey: .paymentStatus)
        try container.encodeIfPresent(isFullPayment, forKey: .isFullPayment)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(fee, forKey: .fee)
        try container.encodeIfPresent(applicationFee, forKey: .applicationFee)
        try container.encodeIfPresent(cardBrand, forKey: .cardBrand)
        try container.encodeIfPresent(cardLast4Digits, forKey: .cardLast4Digits)
        try container.encodeIfPresent(chargeStatusChangeLogs, forKey: .chargeStatusChangeLogs)
        try container.encodeIfPresent(refundStatusChangeLogs, forKey: .refundStatusChangeLogs)
        try container.encodeIfPresent(paymentStatusChangeLogs, forKey: .paymentStatusChangeLogs)
    }
}

