//
// DealItemViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DealItemViewModel: Codable, Hashable {

    public var id: UUID?
    public var name: String?
    public var normalizedName: String?
    public var slug: String?
    public var description: String?
    public var hospitalId: UUID?
    public var hospitalName: String?
    public var hospitalSlug: String?
    public var hospitalLocationCountry: String?
    public var hospitalLocationState: String?
    public var hospitalConsultationEnabled: Bool?
    public var marketingType: MarketingType?
    public var photo: String?
    public var photoThumbnail: String?
    public var dealPackages: [DealPackageItemViewModel]?
    public var dealServices: [DealServiceItemViewModel]?
    public var auditableEntity: AuditableEntity?

    public init(id: UUID? = nil, name: String? = nil, normalizedName: String? = nil, slug: String? = nil, description: String? = nil, hospitalId: UUID? = nil, hospitalName: String? = nil, hospitalSlug: String? = nil, hospitalLocationCountry: String? = nil, hospitalLocationState: String? = nil, hospitalConsultationEnabled: Bool? = nil, marketingType: MarketingType? = nil, photo: String? = nil, photoThumbnail: String? = nil, dealPackages: [DealPackageItemViewModel]? = nil, dealServices: [DealServiceItemViewModel]? = nil, auditableEntity: AuditableEntity? = nil) {
        self.id = id
        self.name = name
        self.normalizedName = normalizedName
        self.slug = slug
        self.description = description
        self.hospitalId = hospitalId
        self.hospitalName = hospitalName
        self.hospitalSlug = hospitalSlug
        self.hospitalLocationCountry = hospitalLocationCountry
        self.hospitalLocationState = hospitalLocationState
        self.hospitalConsultationEnabled = hospitalConsultationEnabled
        self.marketingType = marketingType
        self.photo = photo
        self.photoThumbnail = photoThumbnail
        self.dealPackages = dealPackages
        self.dealServices = dealServices
        self.auditableEntity = auditableEntity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case normalizedName
        case slug
        case description
        case hospitalId
        case hospitalName
        case hospitalSlug
        case hospitalLocationCountry
        case hospitalLocationState
        case hospitalConsultationEnabled
        case marketingType
        case photo
        case photoThumbnail
        case dealPackages
        case dealServices
        case auditableEntity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(normalizedName, forKey: .normalizedName)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(hospitalId, forKey: .hospitalId)
        try container.encodeIfPresent(hospitalName, forKey: .hospitalName)
        try container.encodeIfPresent(hospitalSlug, forKey: .hospitalSlug)
        try container.encodeIfPresent(hospitalLocationCountry, forKey: .hospitalLocationCountry)
        try container.encodeIfPresent(hospitalLocationState, forKey: .hospitalLocationState)
        try container.encodeIfPresent(hospitalConsultationEnabled, forKey: .hospitalConsultationEnabled)
        try container.encodeIfPresent(marketingType, forKey: .marketingType)
        try container.encodeIfPresent(photo, forKey: .photo)
        try container.encodeIfPresent(photoThumbnail, forKey: .photoThumbnail)
        try container.encodeIfPresent(dealPackages, forKey: .dealPackages)
        try container.encodeIfPresent(dealServices, forKey: .dealServices)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
    }
}

