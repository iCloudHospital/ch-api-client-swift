//
// DoctorEducation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DoctorEducation: Codable, Hashable {

    public var id: UUID?
    public var doctorId: UUID?
    public var doctor: Doctor?
    public var institution: String?
    public var normalizedInstitution: String?
    public var qualification: String?
    public var normalizedQualification: String?
    public var graduationDate: Date?

    public init(id: UUID? = nil, doctorId: UUID? = nil, doctor: Doctor? = nil, institution: String? = nil, normalizedInstitution: String? = nil, qualification: String? = nil, normalizedQualification: String? = nil, graduationDate: Date? = nil) {
        self.id = id
        self.doctorId = doctorId
        self.doctor = doctor
        self.institution = institution
        self.normalizedInstitution = normalizedInstitution
        self.qualification = qualification
        self.normalizedQualification = normalizedQualification
        self.graduationDate = graduationDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case doctorId
        case doctor
        case institution
        case normalizedInstitution
        case qualification
        case normalizedQualification
        case graduationDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(doctorId, forKey: .doctorId)
        try container.encodeIfPresent(doctor, forKey: .doctor)
        try container.encodeIfPresent(institution, forKey: .institution)
        try container.encodeIfPresent(normalizedInstitution, forKey: .normalizedInstitution)
        try container.encodeIfPresent(qualification, forKey: .qualification)
        try container.encodeIfPresent(normalizedQualification, forKey: .normalizedQualification)
        try container.encodeIfPresent(graduationDate, forKey: .graduationDate)
    }
}

