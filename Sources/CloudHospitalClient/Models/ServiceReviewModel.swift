//
// ServiceReviewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceReviewModel: Codable, Hashable {

    public var id: UUID?
    public var languageCode: String?
    public var name: String?
    public var slug: String?
    public var description: String?
    public var overview: String?
    public var content: String?
    public var confirmed: Bool?
    public var serviceId: UUID?
    public var serviceName: String?
    public var serviceSlug: String?
    public var hospitalId: UUID?
    public var patientId: UUID?
    public var patientName: String?
    public var patientPhoto: String?
    public var createdDate: Date?
    public var recommended: Bool?
    public var rate: Int?
    public var reviewType: ReviewType?
    public var medias: [MediaModel]?
    public var auditableEntity: AuditableEntity?

    public init(id: UUID? = nil, languageCode: String? = nil, name: String? = nil, slug: String? = nil, description: String? = nil, overview: String? = nil, content: String? = nil, confirmed: Bool? = nil, serviceId: UUID? = nil, serviceName: String? = nil, serviceSlug: String? = nil, hospitalId: UUID? = nil, patientId: UUID? = nil, patientName: String? = nil, patientPhoto: String? = nil, createdDate: Date? = nil, recommended: Bool? = nil, rate: Int? = nil, reviewType: ReviewType? = nil, medias: [MediaModel]? = nil, auditableEntity: AuditableEntity? = nil) {
        self.id = id
        self.languageCode = languageCode
        self.name = name
        self.slug = slug
        self.description = description
        self.overview = overview
        self.content = content
        self.confirmed = confirmed
        self.serviceId = serviceId
        self.serviceName = serviceName
        self.serviceSlug = serviceSlug
        self.hospitalId = hospitalId
        self.patientId = patientId
        self.patientName = patientName
        self.patientPhoto = patientPhoto
        self.createdDate = createdDate
        self.recommended = recommended
        self.rate = rate
        self.reviewType = reviewType
        self.medias = medias
        self.auditableEntity = auditableEntity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case languageCode
        case name
        case slug
        case description
        case overview
        case content
        case confirmed
        case serviceId
        case serviceName
        case serviceSlug
        case hospitalId
        case patientId
        case patientName
        case patientPhoto
        case createdDate
        case recommended
        case rate
        case reviewType
        case medias
        case auditableEntity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(languageCode, forKey: .languageCode)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(confirmed, forKey: .confirmed)
        try container.encodeIfPresent(serviceId, forKey: .serviceId)
        try container.encodeIfPresent(serviceName, forKey: .serviceName)
        try container.encodeIfPresent(serviceSlug, forKey: .serviceSlug)
        try container.encodeIfPresent(hospitalId, forKey: .hospitalId)
        try container.encodeIfPresent(patientId, forKey: .patientId)
        try container.encodeIfPresent(patientName, forKey: .patientName)
        try container.encodeIfPresent(patientPhoto, forKey: .patientPhoto)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(recommended, forKey: .recommended)
        try container.encodeIfPresent(rate, forKey: .rate)
        try container.encodeIfPresent(reviewType, forKey: .reviewType)
        try container.encodeIfPresent(medias, forKey: .medias)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
    }
}

