//
// Question.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Question: Codable, Hashable {

    public var id: UUID?
    public var title: String?
    public var normalizedTitle: String?
    public var body: String?
    public var questionType: QuestionType?
    public var questionStatus: QuestionStatus?
    public var patientId: UUID?
    public var patient: Patient?
    public var hospitalId: UUID?
    public var hospital: Hospital?
    public var dealPackageId: UUID?
    public var dealPackage: DealPackage?
    public var quantity: Int?
    public var questionComments: [QuestionComment]?
    public var medias: [Media]?
    public var auditableEntity: AuditableEntity?

    public init(id: UUID? = nil, title: String? = nil, normalizedTitle: String? = nil, body: String? = nil, questionType: QuestionType? = nil, questionStatus: QuestionStatus? = nil, patientId: UUID? = nil, patient: Patient? = nil, hospitalId: UUID? = nil, hospital: Hospital? = nil, dealPackageId: UUID? = nil, dealPackage: DealPackage? = nil, quantity: Int? = nil, questionComments: [QuestionComment]? = nil, medias: [Media]? = nil, auditableEntity: AuditableEntity? = nil) {
        self.id = id
        self.title = title
        self.normalizedTitle = normalizedTitle
        self.body = body
        self.questionType = questionType
        self.questionStatus = questionStatus
        self.patientId = patientId
        self.patient = patient
        self.hospitalId = hospitalId
        self.hospital = hospital
        self.dealPackageId = dealPackageId
        self.dealPackage = dealPackage
        self.quantity = quantity
        self.questionComments = questionComments
        self.medias = medias
        self.auditableEntity = auditableEntity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case normalizedTitle
        case body
        case questionType
        case questionStatus
        case patientId
        case patient
        case hospitalId
        case hospital
        case dealPackageId
        case dealPackage
        case quantity
        case questionComments
        case medias
        case auditableEntity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(normalizedTitle, forKey: .normalizedTitle)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(questionType, forKey: .questionType)
        try container.encodeIfPresent(questionStatus, forKey: .questionStatus)
        try container.encodeIfPresent(patientId, forKey: .patientId)
        try container.encodeIfPresent(patient, forKey: .patient)
        try container.encodeIfPresent(hospitalId, forKey: .hospitalId)
        try container.encodeIfPresent(hospital, forKey: .hospital)
        try container.encodeIfPresent(dealPackageId, forKey: .dealPackageId)
        try container.encodeIfPresent(dealPackage, forKey: .dealPackage)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(questionComments, forKey: .questionComments)
        try container.encodeIfPresent(medias, forKey: .medias)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
    }
}

