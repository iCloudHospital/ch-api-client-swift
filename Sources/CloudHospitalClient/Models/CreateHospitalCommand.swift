//
// CreateHospitalCommand.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateHospitalCommand: Codable, Hashable {

    public var name: String?
    public var description: String?
    public var logo: String?
    public var overview: String?
    public var bedsCount: Int?
    public var operationsPerYear: Int?
    public var foundationYear: Int?
    public var departmentsCount: Int?
    public var medicalStaffCount: Int?
    public var countryId: UUID?
    public var marketingType: MarketingType?
    public var consultationEnabled: Bool?
    public var consultationFee: Double?
    public var timeZone: String?
    public var awards: [AwardViewModel]?
    public var medias: [MediaViewModel]?
    public var location: LocationViewModel?

    public init(name: String? = nil, description: String? = nil, logo: String? = nil, overview: String? = nil, bedsCount: Int? = nil, operationsPerYear: Int? = nil, foundationYear: Int? = nil, departmentsCount: Int? = nil, medicalStaffCount: Int? = nil, countryId: UUID? = nil, marketingType: MarketingType? = nil, consultationEnabled: Bool? = nil, consultationFee: Double? = nil, timeZone: String? = nil, awards: [AwardViewModel]? = nil, medias: [MediaViewModel]? = nil, location: LocationViewModel? = nil) {
        self.name = name
        self.description = description
        self.logo = logo
        self.overview = overview
        self.bedsCount = bedsCount
        self.operationsPerYear = operationsPerYear
        self.foundationYear = foundationYear
        self.departmentsCount = departmentsCount
        self.medicalStaffCount = medicalStaffCount
        self.countryId = countryId
        self.marketingType = marketingType
        self.consultationEnabled = consultationEnabled
        self.consultationFee = consultationFee
        self.timeZone = timeZone
        self.awards = awards
        self.medias = medias
        self.location = location
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case logo
        case overview
        case bedsCount
        case operationsPerYear
        case foundationYear
        case departmentsCount
        case medicalStaffCount
        case countryId
        case marketingType
        case consultationEnabled
        case consultationFee
        case timeZone
        case awards
        case medias
        case location
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(bedsCount, forKey: .bedsCount)
        try container.encodeIfPresent(operationsPerYear, forKey: .operationsPerYear)
        try container.encodeIfPresent(foundationYear, forKey: .foundationYear)
        try container.encodeIfPresent(departmentsCount, forKey: .departmentsCount)
        try container.encodeIfPresent(medicalStaffCount, forKey: .medicalStaffCount)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(marketingType, forKey: .marketingType)
        try container.encodeIfPresent(consultationEnabled, forKey: .consultationEnabled)
        try container.encodeIfPresent(consultationFee, forKey: .consultationFee)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
        try container.encodeIfPresent(awards, forKey: .awards)
        try container.encodeIfPresent(medias, forKey: .medias)
        try container.encodeIfPresent(location, forKey: .location)
    }
}

