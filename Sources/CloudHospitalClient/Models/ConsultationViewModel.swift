//
// ConsultationViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ConsultationViewModel: Codable, Hashable {

    public var id: UUID?
    public var consultationType: ConsultationType?
    public var patientId: UUID?
    public var patientName: String?
    public var communicationUserId: String?
    public var hospitalId: UUID?
    public var hospitalName: String?
    public var hospitalSlug: String?
    public var specialtyId: UUID?
    public var specialtyName: String?
    public var specialtySlug: String?
    public var doctorId: UUID?
    public var doctorName: String?
    public var doctorSlug: String?
    public var dealId: UUID?
    public var dealName: String?
    public var dealSlug: String?
    public var language: String?
    public var isAccountHolder: Bool?
    public var firstName: String?
    public var lastName: String?
    public var email: String?
    public var phone: String?
    public var dateOfBirth: Date?
    public var gender: Gender?
    public var comment: String?
    public var timeRange: String?
    public var approximateDateStart: Date?
    public var approximateDateEnd: Date?
    public var confirmedDateStart: Date?
    public var confirmedDateEnd: Date?
    public var callerName: String?
    public var callerId: UUID?
    public var fee: Double?
    public var applicationFee: Double?
    public var timeZone: String?
    public var status: ConsultationStatus?
    public var rejectReason: RejectReason?
    public var isOpen: Bool?
    public var paymentId: UUID?

    public init(id: UUID? = nil, consultationType: ConsultationType? = nil, patientId: UUID? = nil, patientName: String? = nil, communicationUserId: String? = nil, hospitalId: UUID? = nil, hospitalName: String? = nil, hospitalSlug: String? = nil, specialtyId: UUID? = nil, specialtyName: String? = nil, specialtySlug: String? = nil, doctorId: UUID? = nil, doctorName: String? = nil, doctorSlug: String? = nil, dealId: UUID? = nil, dealName: String? = nil, dealSlug: String? = nil, language: String? = nil, isAccountHolder: Bool? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil, phone: String? = nil, dateOfBirth: Date? = nil, gender: Gender? = nil, comment: String? = nil, timeRange: String? = nil, approximateDateStart: Date? = nil, approximateDateEnd: Date? = nil, confirmedDateStart: Date? = nil, confirmedDateEnd: Date? = nil, callerName: String? = nil, callerId: UUID? = nil, fee: Double? = nil, applicationFee: Double? = nil, timeZone: String? = nil, status: ConsultationStatus? = nil, rejectReason: RejectReason? = nil, isOpen: Bool? = nil, paymentId: UUID? = nil) {
        self.id = id
        self.consultationType = consultationType
        self.patientId = patientId
        self.patientName = patientName
        self.communicationUserId = communicationUserId
        self.hospitalId = hospitalId
        self.hospitalName = hospitalName
        self.hospitalSlug = hospitalSlug
        self.specialtyId = specialtyId
        self.specialtyName = specialtyName
        self.specialtySlug = specialtySlug
        self.doctorId = doctorId
        self.doctorName = doctorName
        self.doctorSlug = doctorSlug
        self.dealId = dealId
        self.dealName = dealName
        self.dealSlug = dealSlug
        self.language = language
        self.isAccountHolder = isAccountHolder
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.phone = phone
        self.dateOfBirth = dateOfBirth
        self.gender = gender
        self.comment = comment
        self.timeRange = timeRange
        self.approximateDateStart = approximateDateStart
        self.approximateDateEnd = approximateDateEnd
        self.confirmedDateStart = confirmedDateStart
        self.confirmedDateEnd = confirmedDateEnd
        self.callerName = callerName
        self.callerId = callerId
        self.fee = fee
        self.applicationFee = applicationFee
        self.timeZone = timeZone
        self.status = status
        self.rejectReason = rejectReason
        self.isOpen = isOpen
        self.paymentId = paymentId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case consultationType
        case patientId
        case patientName
        case communicationUserId
        case hospitalId
        case hospitalName
        case hospitalSlug
        case specialtyId
        case specialtyName
        case specialtySlug
        case doctorId
        case doctorName
        case doctorSlug
        case dealId
        case dealName
        case dealSlug
        case language
        case isAccountHolder
        case firstName
        case lastName
        case email
        case phone
        case dateOfBirth
        case gender
        case comment
        case timeRange
        case approximateDateStart
        case approximateDateEnd
        case confirmedDateStart
        case confirmedDateEnd
        case callerName
        case callerId
        case fee
        case applicationFee
        case timeZone
        case status
        case rejectReason
        case isOpen
        case paymentId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(consultationType, forKey: .consultationType)
        try container.encodeIfPresent(patientId, forKey: .patientId)
        try container.encodeIfPresent(patientName, forKey: .patientName)
        try container.encodeIfPresent(communicationUserId, forKey: .communicationUserId)
        try container.encodeIfPresent(hospitalId, forKey: .hospitalId)
        try container.encodeIfPresent(hospitalName, forKey: .hospitalName)
        try container.encodeIfPresent(hospitalSlug, forKey: .hospitalSlug)
        try container.encodeIfPresent(specialtyId, forKey: .specialtyId)
        try container.encodeIfPresent(specialtyName, forKey: .specialtyName)
        try container.encodeIfPresent(specialtySlug, forKey: .specialtySlug)
        try container.encodeIfPresent(doctorId, forKey: .doctorId)
        try container.encodeIfPresent(doctorName, forKey: .doctorName)
        try container.encodeIfPresent(doctorSlug, forKey: .doctorSlug)
        try container.encodeIfPresent(dealId, forKey: .dealId)
        try container.encodeIfPresent(dealName, forKey: .dealName)
        try container.encodeIfPresent(dealSlug, forKey: .dealSlug)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(isAccountHolder, forKey: .isAccountHolder)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(timeRange, forKey: .timeRange)
        try container.encodeIfPresent(approximateDateStart, forKey: .approximateDateStart)
        try container.encodeIfPresent(approximateDateEnd, forKey: .approximateDateEnd)
        try container.encodeIfPresent(confirmedDateStart, forKey: .confirmedDateStart)
        try container.encodeIfPresent(confirmedDateEnd, forKey: .confirmedDateEnd)
        try container.encodeIfPresent(callerName, forKey: .callerName)
        try container.encodeIfPresent(callerId, forKey: .callerId)
        try container.encodeIfPresent(fee, forKey: .fee)
        try container.encodeIfPresent(applicationFee, forKey: .applicationFee)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(rejectReason, forKey: .rejectReason)
        try container.encodeIfPresent(isOpen, forKey: .isOpen)
        try container.encodeIfPresent(paymentId, forKey: .paymentId)
    }
}

