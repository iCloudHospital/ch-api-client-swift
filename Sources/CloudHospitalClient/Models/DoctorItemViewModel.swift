//
// DoctorItemViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DoctorItemViewModel: Codable, Hashable {

    public var id: UUID?
    public var userName: String?
    public var firstName: String?
    public var lastName: String?
    public var fullname: String?
    public var phone: String?
    public var email: String?
    public var photo: String?
    public var photoThumbnail: String?
    public var gender: Gender?
    public var dateOfBirth: Date?
    public var timeZone: String?
    public var communicationUserId: String?
    public var auditableEntity: AuditableEntity?
    public var slug: String?
    public var consultationEnabled: Bool?
    public var consultationFee: Double?
    public var overview: String?
    public var doctorReviewsCount: Int?
    public var doctorEducationsCount: Int?
    public var doctorPortfoliosCount: Int?
    public var doctorSpecialtiesCount: Int?
    public var doctorSpecialties: [DoctorSpecialtyItemViewModel]?
    public var doctorCertificatesCount: Int?
    public var doctorAffiliationsCount: Int?
    public var doctorAffiliations: [HospitalAffiliationViewModel]?
    public var articlesCount: Int?

    public init(id: UUID? = nil, userName: String? = nil, firstName: String? = nil, lastName: String? = nil, fullname: String? = nil, phone: String? = nil, email: String? = nil, photo: String? = nil, photoThumbnail: String? = nil, gender: Gender? = nil, dateOfBirth: Date? = nil, timeZone: String? = nil, communicationUserId: String? = nil, auditableEntity: AuditableEntity? = nil, slug: String? = nil, consultationEnabled: Bool? = nil, consultationFee: Double? = nil, overview: String? = nil, doctorReviewsCount: Int? = nil, doctorEducationsCount: Int? = nil, doctorPortfoliosCount: Int? = nil, doctorSpecialtiesCount: Int? = nil, doctorSpecialties: [DoctorSpecialtyItemViewModel]? = nil, doctorCertificatesCount: Int? = nil, doctorAffiliationsCount: Int? = nil, doctorAffiliations: [HospitalAffiliationViewModel]? = nil, articlesCount: Int? = nil) {
        self.id = id
        self.userName = userName
        self.firstName = firstName
        self.lastName = lastName
        self.fullname = fullname
        self.phone = phone
        self.email = email
        self.photo = photo
        self.photoThumbnail = photoThumbnail
        self.gender = gender
        self.dateOfBirth = dateOfBirth
        self.timeZone = timeZone
        self.communicationUserId = communicationUserId
        self.auditableEntity = auditableEntity
        self.slug = slug
        self.consultationEnabled = consultationEnabled
        self.consultationFee = consultationFee
        self.overview = overview
        self.doctorReviewsCount = doctorReviewsCount
        self.doctorEducationsCount = doctorEducationsCount
        self.doctorPortfoliosCount = doctorPortfoliosCount
        self.doctorSpecialtiesCount = doctorSpecialtiesCount
        self.doctorSpecialties = doctorSpecialties
        self.doctorCertificatesCount = doctorCertificatesCount
        self.doctorAffiliationsCount = doctorAffiliationsCount
        self.doctorAffiliations = doctorAffiliations
        self.articlesCount = articlesCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userName
        case firstName
        case lastName
        case fullname
        case phone
        case email
        case photo
        case photoThumbnail
        case gender
        case dateOfBirth
        case timeZone
        case communicationUserId
        case auditableEntity
        case slug
        case consultationEnabled
        case consultationFee
        case overview
        case doctorReviewsCount
        case doctorEducationsCount
        case doctorPortfoliosCount
        case doctorSpecialtiesCount
        case doctorSpecialties
        case doctorCertificatesCount
        case doctorAffiliationsCount
        case doctorAffiliations
        case articlesCount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(fullname, forKey: .fullname)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(photo, forKey: .photo)
        try container.encodeIfPresent(photoThumbnail, forKey: .photoThumbnail)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
        try container.encodeIfPresent(communicationUserId, forKey: .communicationUserId)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(consultationEnabled, forKey: .consultationEnabled)
        try container.encodeIfPresent(consultationFee, forKey: .consultationFee)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(doctorReviewsCount, forKey: .doctorReviewsCount)
        try container.encodeIfPresent(doctorEducationsCount, forKey: .doctorEducationsCount)
        try container.encodeIfPresent(doctorPortfoliosCount, forKey: .doctorPortfoliosCount)
        try container.encodeIfPresent(doctorSpecialtiesCount, forKey: .doctorSpecialtiesCount)
        try container.encodeIfPresent(doctorSpecialties, forKey: .doctorSpecialties)
        try container.encodeIfPresent(doctorCertificatesCount, forKey: .doctorCertificatesCount)
        try container.encodeIfPresent(doctorAffiliationsCount, forKey: .doctorAffiliationsCount)
        try container.encodeIfPresent(doctorAffiliations, forKey: .doctorAffiliations)
        try container.encodeIfPresent(articlesCount, forKey: .articlesCount)
    }
}

