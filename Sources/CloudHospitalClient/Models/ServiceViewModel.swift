//
// ServiceViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceViewModel: Codable, Hashable {

    public var id: UUID?
    public var name: String?
    public var slug: String?
    public var description: String?
    public var content: String?
    public var hospitalId: UUID?
    public var hospitalName: String?
    public var specialtyTypeId: UUID?
    public var specialtyTypeName: String?
    public var specialtyId: UUID?
    public var specialtyName: String?
    public var marketingType: MarketingType?
    public var procedure: Procedure?
    public var minPrice: Double?
    public var maxPrice: Double?
    public var priceReuqest: Bool?
    public var order: Int?
    public var auditableEntity: AuditableEntity?

    public init(id: UUID? = nil, name: String? = nil, slug: String? = nil, description: String? = nil, content: String? = nil, hospitalId: UUID? = nil, hospitalName: String? = nil, specialtyTypeId: UUID? = nil, specialtyTypeName: String? = nil, specialtyId: UUID? = nil, specialtyName: String? = nil, marketingType: MarketingType? = nil, procedure: Procedure? = nil, minPrice: Double? = nil, maxPrice: Double? = nil, priceReuqest: Bool? = nil, order: Int? = nil, auditableEntity: AuditableEntity? = nil) {
        self.id = id
        self.name = name
        self.slug = slug
        self.description = description
        self.content = content
        self.hospitalId = hospitalId
        self.hospitalName = hospitalName
        self.specialtyTypeId = specialtyTypeId
        self.specialtyTypeName = specialtyTypeName
        self.specialtyId = specialtyId
        self.specialtyName = specialtyName
        self.marketingType = marketingType
        self.procedure = procedure
        self.minPrice = minPrice
        self.maxPrice = maxPrice
        self.priceReuqest = priceReuqest
        self.order = order
        self.auditableEntity = auditableEntity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case slug
        case description
        case content
        case hospitalId
        case hospitalName
        case specialtyTypeId
        case specialtyTypeName
        case specialtyId
        case specialtyName
        case marketingType
        case procedure
        case minPrice
        case maxPrice
        case priceReuqest
        case order
        case auditableEntity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(hospitalId, forKey: .hospitalId)
        try container.encodeIfPresent(hospitalName, forKey: .hospitalName)
        try container.encodeIfPresent(specialtyTypeId, forKey: .specialtyTypeId)
        try container.encodeIfPresent(specialtyTypeName, forKey: .specialtyTypeName)
        try container.encodeIfPresent(specialtyId, forKey: .specialtyId)
        try container.encodeIfPresent(specialtyName, forKey: .specialtyName)
        try container.encodeIfPresent(marketingType, forKey: .marketingType)
        try container.encodeIfPresent(procedure, forKey: .procedure)
        try container.encodeIfPresent(minPrice, forKey: .minPrice)
        try container.encodeIfPresent(maxPrice, forKey: .maxPrice)
        try container.encodeIfPresent(priceReuqest, forKey: .priceReuqest)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
    }
}

