//
// QuestionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QuestionViewModel: Codable, Hashable {

    public var id: UUID?
    public var title: String?
    public var userId: UUID?
    public var userName: String?
    public var fullName: String?
    public var hospitalId: UUID?
    public var hospitalName: String?
    public var questionType: QuestionType?
    public var questionStatus: QuestionStatus?
    public var questionCommentsCount: Int?
    public var dealId: UUID?
    public var dealName: String?
    public var dealPackageId: UUID?
    public var refundPolicy: RefundPolicy?
    public var quantity: Int?
    public var auditableEntity: AuditableEntity?
    public var body: String?
    public var medias: [MediaViewModel]?

    public init(id: UUID? = nil, title: String? = nil, userId: UUID? = nil, userName: String? = nil, fullName: String? = nil, hospitalId: UUID? = nil, hospitalName: String? = nil, questionType: QuestionType? = nil, questionStatus: QuestionStatus? = nil, questionCommentsCount: Int? = nil, dealId: UUID? = nil, dealName: String? = nil, dealPackageId: UUID? = nil, refundPolicy: RefundPolicy? = nil, quantity: Int? = nil, auditableEntity: AuditableEntity? = nil, body: String? = nil, medias: [MediaViewModel]? = nil) {
        self.id = id
        self.title = title
        self.userId = userId
        self.userName = userName
        self.fullName = fullName
        self.hospitalId = hospitalId
        self.hospitalName = hospitalName
        self.questionType = questionType
        self.questionStatus = questionStatus
        self.questionCommentsCount = questionCommentsCount
        self.dealId = dealId
        self.dealName = dealName
        self.dealPackageId = dealPackageId
        self.refundPolicy = refundPolicy
        self.quantity = quantity
        self.auditableEntity = auditableEntity
        self.body = body
        self.medias = medias
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case userId
        case userName
        case fullName
        case hospitalId
        case hospitalName
        case questionType
        case questionStatus
        case questionCommentsCount
        case dealId
        case dealName
        case dealPackageId
        case refundPolicy
        case quantity
        case auditableEntity
        case body
        case medias
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(hospitalId, forKey: .hospitalId)
        try container.encodeIfPresent(hospitalName, forKey: .hospitalName)
        try container.encodeIfPresent(questionType, forKey: .questionType)
        try container.encodeIfPresent(questionStatus, forKey: .questionStatus)
        try container.encodeIfPresent(questionCommentsCount, forKey: .questionCommentsCount)
        try container.encodeIfPresent(dealId, forKey: .dealId)
        try container.encodeIfPresent(dealName, forKey: .dealName)
        try container.encodeIfPresent(dealPackageId, forKey: .dealPackageId)
        try container.encodeIfPresent(refundPolicy, forKey: .refundPolicy)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(auditableEntity, forKey: .auditableEntity)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(medias, forKey: .medias)
    }
}

