//
// UpdateConsultationCommand.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateConsultationCommand: Codable, Hashable {

    public var specialtyId: UUID?
    public var doctorId: UUID?
    public var language: String?
    public var isAccountHolder: Bool?
    public var firstName: String?
    public var lastName: String?
    public var email: String?
    public var phone: String?
    public var dateOfBirth: Date?
    public var gender: Gender?
    public var comment: String?
    public var timeRange: String?
    public var approximateDateStart: Date?
    public var approximateDateEnd: Date?
    public var timeZone: String?

    public init(specialtyId: UUID? = nil, doctorId: UUID? = nil, language: String? = nil, isAccountHolder: Bool? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil, phone: String? = nil, dateOfBirth: Date? = nil, gender: Gender? = nil, comment: String? = nil, timeRange: String? = nil, approximateDateStart: Date? = nil, approximateDateEnd: Date? = nil, timeZone: String? = nil) {
        self.specialtyId = specialtyId
        self.doctorId = doctorId
        self.language = language
        self.isAccountHolder = isAccountHolder
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.phone = phone
        self.dateOfBirth = dateOfBirth
        self.gender = gender
        self.comment = comment
        self.timeRange = timeRange
        self.approximateDateStart = approximateDateStart
        self.approximateDateEnd = approximateDateEnd
        self.timeZone = timeZone
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case specialtyId
        case doctorId
        case language
        case isAccountHolder
        case firstName
        case lastName
        case email
        case phone
        case dateOfBirth
        case gender
        case comment
        case timeRange
        case approximateDateStart
        case approximateDateEnd
        case timeZone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(specialtyId, forKey: .specialtyId)
        try container.encodeIfPresent(doctorId, forKey: .doctorId)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(isAccountHolder, forKey: .isAccountHolder)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(timeRange, forKey: .timeRange)
        try container.encodeIfPresent(approximateDateStart, forKey: .approximateDateStart)
        try container.encodeIfPresent(approximateDateEnd, forKey: .approximateDateEnd)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
    }
}

