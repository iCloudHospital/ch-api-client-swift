//
// SendBirdUserViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SendBirdUserViewModel: Codable, Hashable {

    public var phoneNumber: String?
    public var hasEverLoggedIn: Bool?
    public var userId: String?
    public var accessToken: String?
    public var createdAt: Int64?
    public var isActive: Bool?
    public var locale: String?
    public var isOnline: Bool?
    public var lastSeenAt: Int64?
    public var isShadowBlocked: Bool?
    public var nickname: String?
    public var profileUrl: String?

    public init(phoneNumber: String? = nil, hasEverLoggedIn: Bool? = nil, userId: String? = nil, accessToken: String? = nil, createdAt: Int64? = nil, isActive: Bool? = nil, locale: String? = nil, isOnline: Bool? = nil, lastSeenAt: Int64? = nil, isShadowBlocked: Bool? = nil, nickname: String? = nil, profileUrl: String? = nil) {
        self.phoneNumber = phoneNumber
        self.hasEverLoggedIn = hasEverLoggedIn
        self.userId = userId
        self.accessToken = accessToken
        self.createdAt = createdAt
        self.isActive = isActive
        self.locale = locale
        self.isOnline = isOnline
        self.lastSeenAt = lastSeenAt
        self.isShadowBlocked = isShadowBlocked
        self.nickname = nickname
        self.profileUrl = profileUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case phoneNumber = "phone_number"
        case hasEverLoggedIn = "has_ever_logged_in"
        case userId = "user_id"
        case accessToken = "access_token"
        case createdAt = "created_at"
        case isActive = "is_active"
        case locale
        case isOnline = "is_online"
        case lastSeenAt = "last_seen_at"
        case isShadowBlocked = "is_shadow_blocked"
        case nickname
        case profileUrl = "profile_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(hasEverLoggedIn, forKey: .hasEverLoggedIn)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(accessToken, forKey: .accessToken)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeIfPresent(isOnline, forKey: .isOnline)
        try container.encodeIfPresent(lastSeenAt, forKey: .lastSeenAt)
        try container.encodeIfPresent(isShadowBlocked, forKey: .isShadowBlocked)
        try container.encodeIfPresent(nickname, forKey: .nickname)
        try container.encodeIfPresent(profileUrl, forKey: .profileUrl)
    }
}

