//
// HealthProfileViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct HealthProfileViewModel: Codable, Hashable {

    public var firstName: String?
    public var lastName: String?
    public var phone: String?
    public var gender: Gender?
    public var dateOfBirth: Date?
    public var residenceAddress: String?
    public var insuranceCompany: String?
    public var height: Int?
    public var weight: Int?

    public init(firstName: String? = nil, lastName: String? = nil, phone: String? = nil, gender: Gender? = nil, dateOfBirth: Date? = nil, residenceAddress: String? = nil, insuranceCompany: String? = nil, height: Int? = nil, weight: Int? = nil) {
        self.firstName = firstName
        self.lastName = lastName
        self.phone = phone
        self.gender = gender
        self.dateOfBirth = dateOfBirth
        self.residenceAddress = residenceAddress
        self.insuranceCompany = insuranceCompany
        self.height = height
        self.weight = weight
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstName
        case lastName
        case phone
        case gender
        case dateOfBirth
        case residenceAddress
        case insuranceCompany
        case height
        case weight
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(residenceAddress, forKey: .residenceAddress)
        try container.encodeIfPresent(insuranceCompany, forKey: .insuranceCompany)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(weight, forKey: .weight)
    }
}

